"""
segmentacion_ml.py - VERSI√ìN CORREGIDA SIN DEEP LEARNING
Sistema ML para An√°lisis de Calidad del Agua - Compatible con PyInstaller
Solo m√≥dulos Supervisado y No Supervisado
"""

import sys
import os
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QPushButton, QLabel,
                             QHBoxLayout, QFrame, QApplication, QMessageBox,
                             QGridLayout, QScrollArea, QGraphicsDropShadowEffect)
from PyQt5.QtCore import Qt, pyqtSignal, QPropertyAnimation, QEasingCurve, QTimer
from PyQt5.QtGui import QFont, QColor, QPalette

import traceback

# Importar Data Manager
try:
    from .data_manager import DataManagerSingleton, get_data_manager
    DATA_MANAGER_AVAILABLE = True
    print("‚úÖ DataManager disponible")
except ImportError:
    try:
        from .data_manager import get_data_manager
        DATA_MANAGER_AVAILABLE = True
        print("‚úÖ DataManager disponible (fallback)")
    except ImportError:
        DATA_MANAGER_AVAILABLE = False
        print("‚ö†Ô∏è DataManager no disponible")

# Importar ventana de supervisado compatible
try:
    from .supervisado_window import SupervisadoWindowCompatible
    SUPERVISADO_AVAILABLE = True
    print("‚úÖ M√≥dulo Supervisado Compatible disponible")
except ImportError:
    try:
        # Fallback a la versi√≥n original
        from .supervisado_window import SupervisadoWindow as SupervisadoWindowCompatible
        SUPERVISADO_AVAILABLE = True
        print("‚úÖ M√≥dulo Supervisado Original disponible")
    except ImportError:
        SUPERVISADO_AVAILABLE = False
        print("‚ö†Ô∏è M√≥dulo Supervisado no disponible")

# Importar ventana de no supervisado - CORREGIDO
print("Intentando cargar m√≥dulo No Supervisado...")
try:
    from .no_supervisado_window import NoSupervisadoWindow
    NO_SUPERVISADO_AVAILABLE = True
    print("‚úÖ M√≥dulo No Supervisado cargado exitosamente")
except ImportError as e:
    NO_SUPERVISADO_AVAILABLE = False
    print(f"‚ùå Error cargando m√≥dulo No Supervisado: {e}")
    print("Traceback completo:")
    traceback.print_exc()

# Verificaci√≥n final de m√≥dulos
print(f"\n=== ESTADO FINAL DE M√ìDULOS ===")
print(f"DataManager: {'‚úÖ' if DATA_MANAGER_AVAILABLE else '‚ùå'}")
print(f"Supervisado: {'‚úÖ' if SUPERVISADO_AVAILABLE else '‚ùå'}")
print(f"No Supervisado: {'‚úÖ' if NO_SUPERVISADO_AVAILABLE else '‚ùå'}")
print(f"================================\n")


class ModernButtonCompatible(QFrame):
    """Bot√≥n moderno compatible con PyInstaller"""
    clicked = pyqtSignal()

    def __init__(self, config):
        super().__init__()
        self.config = config
        self.setup_ui()
        self.add_shadow_effect()

    def setup_ui(self):
        self.setObjectName("modernButton")
        self.setCursor(Qt.PointingHandCursor)
        self.setMinimumSize(320, 200)
        self.setMaximumSize(400, 250)

        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(30, 25, 30, 25)

        # Contenedor del icono
        icon_container = QFrame()
        icon_container.setObjectName("iconContainer")
        icon_container.setFixedSize(80, 80)
        icon_layout = QVBoxLayout(icon_container)

        icon_label = QLabel(self.config["icon"])
        icon_label.setAlignment(Qt.AlignCenter)
        icon_label.setStyleSheet(f"""
            font-size: 40px;
            color: {self.config['color']};
        """)
        icon_layout.addWidget(icon_label)

        # T√≠tulo
        title_label = QLabel(self.config["title"])
        title_label.setObjectName("buttonTitle")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setWordWrap(True)

        # Descripci√≥n
        desc_label = QLabel(self.config["description"])
        desc_label.setObjectName("buttonDescription")
        desc_label.setAlignment(Qt.AlignCenter)
        desc_label.setWordWrap(True)

        # Caracter√≠sticas
        features_label = QLabel(self.config["features"])
        features_label.setObjectName("buttonFeatures")
        features_label.setAlignment(Qt.AlignCenter)
        features_label.setWordWrap(True)

        # Estado del m√≥dulo
        status_label = QLabel(self.config.get("status", ""))
        status_label.setObjectName("buttonStatus")
        status_label.setAlignment(Qt.AlignCenter)

        # Agregar widgets
        layout.addWidget(icon_container, alignment=Qt.AlignCenter)
        layout.addWidget(title_label)
        layout.addWidget(desc_label)
        layout.addWidget(features_label)
        layout.addWidget(status_label)
        layout.addStretch()

        # Estilo base
        self.setStyleSheet(f"""
            #modernButton {{
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                    stop: 0 #ffffff, stop: 1 #f8f9fa);
                border: 2px solid #e9ecef;
                border-radius: 15px;
            }}
            
            #modernButton:hover {{
                background: qlineargradient(x1: 0, y1: 0, x2: 0, y2: 1,
                    stop: 0 #ffffff, stop: 1 {self.config['color']}20);
                border: 2px solid {self.config['color']};
            }}
            
            #iconContainer {{
                background: {self.config['color']}15;
                border-radius: 40px;
            }}
            
            #buttonTitle {{
                font-size: 18px;
                font-weight: bold;
                color: #2c3e50;
                margin-top: 10px;
            }}
            
            #buttonDescription {{
                font-size: 14px;
                color: #6c757d;
                margin-top: 5px;
            }}
            
            #buttonFeatures {{
                font-size: 12px;
                color: #868e96;
                font-style: italic;
                margin-top: 10px;
            }}
            
            #buttonStatus {{
                font-size: 11px;
                font-weight: bold;
                margin-top: 5px;
            }}
        """)

    def add_shadow_effect(self):
        """Agregar efecto de sombra"""
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(20)
        shadow.setXOffset(0)
        shadow.setYOffset(5)
        shadow.setColor(QColor(0, 0, 0, 30))
        self.setGraphicsEffect(shadow)

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.clicked.emit()

    def enterEvent(self, event):
        """Efecto al pasar el mouse"""
        shadow = self.graphicsEffect()
        if shadow:
            shadow.setBlurRadius(25)
            shadow.setYOffset(8)
            shadow.setColor(QColor(0, 0, 0, 50))

    def leaveEvent(self, event):
        """Efecto al quitar el mouse"""
        shadow = self.graphicsEffect()
        if shadow:
            shadow.setBlurRadius(20)
            shadow.setYOffset(5)
            shadow.setColor(QColor(0, 0, 0, 30))


class SegmentacionMLCompatible(QWidget):
    """Ventana principal del sistema ML - Compatible con PyInstaller"""

    # Se√±ales
    ventana_cerrada = pyqtSignal()
    regresar_menu = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.supervisado_window = None
        self.no_supervisado_window = None

        # Inicializar data manager de forma segura
        if DATA_MANAGER_AVAILABLE:
            try:
                self.data_manager = get_data_manager()
                print("‚úÖ DataManager inicializado")
            except Exception as e:
                self.data_manager = None
                print(f"‚ö†Ô∏è Error inicializando DataManager: {e}")
        else:
            self.data_manager = None

        self.init_ui()
        self.apply_theme()

        # Verificar datos al iniciar
        self.check_data_status()

    def init_ui(self):
        """Inicializar interfaz de usuario compatible"""
        self.setWindowTitle("üß† Sistema Machine Learning - Compatible PyInstaller")
        self.setMinimumSize(1000, 700)

        # Layout principal con scroll
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(0, 0, 0, 0)

        # Scroll area
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAlwaysOff)

        # Widget contenedor
        container = QWidget()
        container_layout = QVBoxLayout(container)
        container_layout.setSpacing(0)
        container_layout.setContentsMargins(0, 0, 0, 0)

        # Header
        header = self.create_header()
        container_layout.addWidget(header)

        # Contenido principal
        content = self.create_main_content()
        container_layout.addWidget(content)

        # Footer
        footer = self.create_footer()
        container_layout.addWidget(footer)

        scroll_area.setWidget(container)
        main_layout.addWidget(scroll_area)

    def create_header(self):
        """Crear header moderno"""
        header = QFrame()
        header.setObjectName("header")
        header.setFixedHeight(180)

        layout = QVBoxLayout(header)
        layout.setSpacing(10)
        layout.setContentsMargins(40, 30, 40, 30)

        # T√≠tulo principal
        title_container = QFrame()
        title_container.setObjectName("titleContainer")
        title_layout = QVBoxLayout(title_container)

        main_title = QLabel("Sistema de Machine Learning Compatible")
        main_title.setObjectName("mainTitle")
        main_title.setAlignment(Qt.AlignCenter)

        subtitle = QLabel("An√°lisis Avanzado de Calidad del Agua - PyInstaller Ready")
        subtitle.setObjectName("subtitle")
        subtitle.setAlignment(Qt.AlignCenter)

        title_layout.addWidget(main_title)
        title_layout.addWidget(subtitle)

        # Barra de estado
        status_bar = self.create_status_bar()

        layout.addWidget(title_container)
        layout.addWidget(status_bar)

        return header

    def create_status_bar(self):
        """Crear barra de estado del sistema"""
        status_frame = QFrame()
        status_frame.setObjectName("statusBar")
        status_frame.setMaximumHeight(40)

        layout = QHBoxLayout(status_frame)
        layout.setContentsMargins(20, 5, 20, 5)

        # Estado de datos
        if self.data_manager and self.data_manager.has_data():
            data_status = "üìä Datos cargados"
            data_color = "‚úÖ"
            try:
                data_info = self.data_manager.get_info()
                data_shape = f"({data_info['shape'][0]} √ó {data_info['shape'][1]})"
            except:
                data_shape = ""
        else:
            data_status = "üìä Sin datos"
            data_color = "‚ùå"
            data_shape = ""

        # Estado de m√≥dulos
        supervisado_status = "‚úÖ" if SUPERVISADO_AVAILABLE else "‚ùå"
        no_supervisado_status = "‚úÖ" if NO_SUPERVISADO_AVAILABLE else "‚ùå"

        # Estado general
        deps_ok = SUPERVISADO_AVAILABLE or NO_SUPERVISADO_AVAILABLE
        status_icon = QLabel("‚úÖ" if deps_ok else "‚ö†Ô∏è")
        status_text = QLabel("Sistema Compatible PyInstaller" if deps_ok else "M√≥dulos no disponibles")
        status_text.setObjectName("statusText")

        # Estado de datos
        data_icon = QLabel(data_color)
        self.data_status_label = QLabel(f"{data_status} {data_shape}")
        self.data_status_label.setObjectName("statusText")

        # Estado de m√≥dulos
        modules_label = QLabel(f"üìä Supervisado {supervisado_status} | üîç No Supervisado {no_supervisado_status}")
        modules_label.setObjectName("statusText")

        layout.addWidget(status_icon)
        layout.addWidget(status_text)
        layout.addWidget(QLabel(" | "))
        layout.addWidget(data_icon)
        layout.addWidget(self.data_status_label)
        layout.addWidget(QLabel(" | "))
        layout.addWidget(modules_label)
        layout.addStretch()

        return status_frame

    def create_main_content(self):
        """Crear contenido principal con m√≥dulos disponibles"""
        content = QFrame()
        content.setObjectName("mainContent")

        main_layout = QVBoxLayout(content)
        main_layout.setSpacing(30)
        main_layout.setContentsMargins(40, 40, 40, 40)
        main_layout.setAlignment(Qt.AlignCenter)  # üîπ Centrar verticalmente todo el contenido

        # Descripci√≥n
        desc_label = QLabel("Selecciona el tipo de an√°lisis que deseas realizar:")
        desc_label.setObjectName("description")
        desc_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(desc_label)

        # Contenedor de botones
        buttons_container = QFrame()
        buttons_layout = QHBoxLayout(buttons_container)
        buttons_layout.setSpacing(20)
        buttons_layout.setContentsMargins(0, 0, 0, 0)
        buttons_layout.setAlignment(Qt.AlignCenter)  # üîπ Centrar horizontalmente los botones

        # Configuraci√≥n de m√≥dulos
        modules = []

        # M√≥dulo Supervisado
        if SUPERVISADO_AVAILABLE:
            modules.append({
                "title": "Aprendizaje Supervisado",
                "icon": "üéØ",
                "description": "Predicci√≥n y clasificaci√≥n con datos etiquetados",
                "features": "Regresi√≥n ‚Ä¢ SVM ‚Ä¢ √Årboles ‚Ä¢ Implementaci√≥n NumPy",
                "color": "#3498db",
                "status": "‚úÖ Compatible PyInstaller",
                "action": self.open_supervisado
            })

        # M√≥dulo No Supervisado
        if NO_SUPERVISADO_AVAILABLE:
            modules.append({
                "title": "Aprendizaje No Supervisado",
                "icon": "üîç",
                "description": "Descubrimiento de patrones sin etiquetas",
                "features": "K-Means ‚Ä¢ DBSCAN ‚Ä¢ PCA ‚Ä¢ Clustering",
                "color": "#9b59b6",
                "status": "‚úÖ Gr√°ficas Corregidas",
                "action": self.open_no_supervisado
            })

        # Si no hay m√≥dulos disponibles
        if not modules:
            modules.append({
                "title": "No hay m√≥dulos disponibles",
                "icon": "‚ö†Ô∏è",
                "description": "Verifica la instalaci√≥n de dependencias",
                "features": "pip install scikit-learn matplotlib numpy pandas",
                "color": "#95a5a6",
                "status": "‚ùå Error de instalaci√≥n",
                "action": lambda: QMessageBox.warning(
                    self, "Error",
                    "No hay m√≥dulos disponibles.\n\n"
                    "Instala las dependencias:\n"
                    "pip install scikit-learn matplotlib numpy pandas"
                )
            })

        # Crear botones
        for module_config in modules:
            button = ModernButtonCompatible(module_config)
            button.clicked.connect(module_config["action"])
            buttons_layout.addWidget(button)

        main_layout.addWidget(buttons_container, alignment=Qt.AlignCenter)

        # Informaci√≥n adicional
        info_frame = self.create_info_section()
        main_layout.addWidget(info_frame, alignment=Qt.AlignCenter)

        return content

    def create_info_section(self):
        """Crear secci√≥n de informaci√≥n adicional"""
        info_frame = QFrame()
        info_frame.setObjectName("infoSection")
        info_frame.setMaximumHeight(150)

        layout = QGridLayout(info_frame)
        layout.setSpacing(20)
        layout.setContentsMargins(30, 20, 30, 20)

        # Caracter√≠sticas del sistema
        features = [
            ("üöÄ", "Alto Rendimiento", "Implementaciones optimizadas en NumPy"),
            ("üìä", "Visualizaciones", "Gr√°ficos detallados con PyInstaller"),
            ("üîß", "Sin Dependencias", "Evita librer√≠as problem√°ticas"),
            ("üíæ", "Ejecutables", "Genera .exe sin conflictos")
        ]

        for i, (icon, title, desc) in enumerate(features):
            feature_widget = self.create_feature_widget(icon, title, desc)
            row = i // 2
            col = i % 2
            layout.addWidget(feature_widget, row, col)

        return info_frame

    def create_feature_widget(self, icon, title, description):
        """Crear widget de caracter√≠stica"""
        widget = QFrame()
        widget.setObjectName("featureWidget")

        layout = QHBoxLayout(widget)
        layout.setSpacing(15)

        # Icono
        icon_label = QLabel(icon)
        icon_label.setObjectName("featureIcon")
        icon_label.setFixedSize(40, 40)
        icon_label.setAlignment(Qt.AlignCenter)

        # Texto
        text_layout = QVBoxLayout()
        text_layout.setSpacing(2)

        title_label = QLabel(title)
        title_label.setObjectName("featureTitle")

        desc_label = QLabel(description)
        desc_label.setObjectName("featureDesc")

        text_layout.addWidget(title_label)
        text_layout.addWidget(desc_label)

        layout.addWidget(icon_label)
        layout.addLayout(text_layout)
        layout.addStretch()

        return widget

    def create_footer(self):
        """Crear footer con controles"""
        footer = QFrame()
        footer.setObjectName("footer")
        footer.setFixedHeight(80)

        layout = QHBoxLayout(footer)
        layout.setContentsMargins(40, 20, 40, 20)

        # Botones de acci√≥n
        help_btn = QPushButton("‚ùì Ayuda")
        help_btn.setObjectName("footerButton")
        help_btn.clicked.connect(self.show_help)

        about_btn = QPushButton("‚ÑπÔ∏è Acerca de")
        about_btn.setObjectName("footerButton")
        about_btn.clicked.connect(self.show_about)

        # Bot√≥n actualizar datos
        self.refresh_btn = QPushButton("üîÑ Actualizar Datos")
        self.refresh_btn.setObjectName("footerButton")
        self.refresh_btn.clicked.connect(self.check_data_status)

        # Bot√≥n de salir
        self.exit_button = QPushButton("‚Üê Regresar al Men√∫")
        self.exit_button.setObjectName("exitButton")
        self.exit_button.clicked.connect(self.on_regresar_menu)

        layout.addWidget(help_btn)
        layout.addWidget(about_btn)
        layout.addWidget(self.refresh_btn)
        layout.addStretch()
        layout.addWidget(self.exit_button)

        return footer

    def apply_theme(self):
        """Aplicar tema moderno compatible"""
        self.setStyleSheet("""
            /* Estilos generales */
            QWidget {
                font-family: 'Segoe UI', -apple-system, Arial, sans-serif;
                color: #2d3748;
            }
            
            /* Header */
            #header {
                background: qlineargradient(x1: 0, y1: 0, x2: 1, y2: 1,
                    stop: 0 #667eea, stop: 1 #764ba2);
            }
            
            #titleContainer {
                background: transparent;
            }
            
            #mainTitle {
                font-size: 32px;
                font-weight: 700;
                color: white;
                margin-bottom: 5px;
            }
            
            #subtitle {
                font-size: 16px;
                color: rgba(255, 255, 255, 0.9);
                font-weight: 300;
            }
            
            /* Status Bar */
            #statusBar {
                background: rgba(255, 255, 255, 0.1);
                border-radius: 20px;
                border: 1px solid rgba(255, 255, 255, 0.2);
            }
            
            #statusText {
                color: white;
                font-weight: 500;
            }
            
            /* Contenido principal */
            #mainContent {
                background: transparent;
            }
            
            #description {
                font-size: 16px;
                color: #4a5568;
                margin-bottom: 20px;
            }
            
            /* Secci√≥n de informaci√≥n */
            #infoSection {
                background: white;
                border-radius: 15px;
                border: 1px solid #e2e8f0;
            }
            
            #featureWidget {
                background: transparent;
            }
            
            #featureIcon {
                background: #f7fafc;
                border-radius: 10px;
                font-size: 20px;
            }
            
            #featureTitle {
                font-weight: 600;
                font-size: 14px;
                color: #2d3748;
            }
            
            #featureDesc {
                font-size: 12px;
                color: #718096;
            }
            
            /* Footer */
            #footer {
                background: white;
                border-top: 1px solid #e2e8f0;
            }
            
            #footerButton {
                background: #e2e8f0;
                border: none;
                border-radius: 8px;
                padding: 10px 20px;
                color: #4a5568;
                font-weight: 500;
            }
            
            #footerButton:hover {
                background: #cbd5e0;
                color: #2d3748;
            }
            
            #exitButton {
                background: #48bb78;
                border: none;
                border-radius: 8px;
                padding: 10px 25px;
                color: white;
                font-weight: 600;
                font-size: 14px;
            }
            
            #exitButton:hover {
                background: #38a169;
            }
        """)

    def check_data_status(self):
        """Verificar y actualizar estado de los datos"""
        if self.data_manager and self.data_manager.has_data():
            try:
                data_info = self.data_manager.get_info()
                self.data_status_label.setText(
                    f"üìä Datos cargados ({data_info['shape'][0]:,} √ó {data_info['shape'][1]})"
                )
            except:
                self.data_status_label.setText("üìä Datos cargados (info no disponible)")
        else:
            self.data_status_label.setText("üìä Sin datos cargados")

    def open_supervisado(self):
        """Abrir m√≥dulo de aprendizaje supervisado compatible"""
        if not SUPERVISADO_AVAILABLE:
            QMessageBox.warning(
                self,
                "M√≥dulo no disponible",
                "El m√≥dulo de Aprendizaje Supervisado no est√° instalado.\n\n"
                "Verifica que el archivo 'supervisado_window.py' est√© disponible."
            )
            return

        # Verificar datos cargados
        if not self.data_manager or not self.data_manager.has_data():
            reply = QMessageBox.question(
                self,
                "Sin datos cargados",
                "No hay datos cargados en el sistema.\n\n"
                "¬øDeseas cargar datos de demostraci√≥n?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.Yes
            )

            if reply == QMessageBox.Yes:
                try:
                    self.data_manager.generate_demo_data(n_samples=500)
                    self.check_data_status()
                    QMessageBox.information(
                        self,
                        "Datos de demostraci√≥n",
                        "Se han generado datos de demostraci√≥n con 500 muestras.\n"
                        "Ahora puedes explorar el m√≥dulo ML Supervisado Compatible."
                    )
                except Exception as e:
                    QMessageBox.critical(
                        self,
                        "Error",
                        f"Error al generar datos de demostraci√≥n:\n{str(e)}"
                    )
                    return
            else:
                return

        # Crear o mostrar ventana supervisado compatible
        try:
            if self.supervisado_window is None:
                self.supervisado_window = SupervisadoWindowCompatible()
                self.supervisado_window.destroyed.connect(
                    lambda: setattr(self, 'supervisado_window', None)
                )

            self.supervisado_window.show()
            self.supervisado_window.raise_()
            self.supervisado_window.activateWindow()

        except Exception as e:
            print(f"Error abriendo SupervisadoWindowCompatible:\n{traceback.format_exc()}")
            QMessageBox.critical(
                self,
                "Error al abrir m√≥dulo",
                f"No se pudo abrir el m√≥dulo supervisado compatible:\n{str(e)}"
            )

    def open_no_supervisado(self):
        """Abrir m√≥dulo de aprendizaje no supervisado"""
        if not NO_SUPERVISADO_AVAILABLE:
            QMessageBox.warning(
                self,
                "M√≥dulo no disponible",
                "El m√≥dulo de Aprendizaje No Supervisado no est√° disponible.\n\n"
                "Verifica las dependencias:\n"
                "pip install scikit-learn matplotlib numpy pandas"
            )
            return

        # Verificar datos
        if not self.data_manager or not self.data_manager.has_data():
            reply = QMessageBox.question(
                self,
                "Sin datos cargados",
                "¬øDeseas cargar datos de demostraci√≥n?",
                QMessageBox.Yes | QMessageBox.No,
                QMessageBox.Yes
            )

            if reply == QMessageBox.Yes:
                try:
                    self.data_manager.generate_demo_data(n_samples=300)
                    self.check_data_status()
                    QMessageBox.information(
                        self,
                        "Datos de demostraci√≥n",
                        "Datos de demostraci√≥n generados para clustering y PCA.\n"
                        "Incluye gr√°ficas detalladas corregidas."
                    )
                except Exception as e:
                    QMessageBox.critical(self, "Error", f"Error: {str(e)}")
                    return
            else:
                return

        try:
            if self.no_supervisado_window is None:
                self.no_supervisado_window = NoSupervisadoWindow()
                self.no_supervisado_window.destroyed.connect(
                    lambda: setattr(self, 'no_supervisado_window', None)
                )

            self.no_supervisado_window.show()
            self.no_supervisado_window.raise_()
            self.no_supervisado_window.activateWindow()

        except Exception as e:
            print(f"Error abriendo NoSupervisadoWindow:\n{traceback.format_exc()}")
            QMessageBox.critical(
                self,
                "Error al abrir m√≥dulo",
                f"Error en m√≥dulo No Supervisado:\n{str(e)}"
            )

    def show_help(self):
        """Mostrar ayuda del sistema compatible"""
        help_text = """
        <h2>üß† Sistema ML Compatible con PyInstaller</h2>
        
        <h3>‚úÖ Caracter√≠sticas de compatibilidad:</h3>
        <ul>
            <li>‚Ä¢ <b>M√≥dulo Supervisado:</b> Implementaciones propias en NumPy</li>
            <li>‚Ä¢ <b>M√≥dulo No Supervisado:</b> Con gr√°ficas detalladas corregidas</li>
            <li>‚Ä¢ <b>Dependencias m√≠nimas:</b> Solo librer√≠as esenciales</li>
            <li>‚Ä¢ <b>Ejecutables optimizados:</b> Sin conflictos</li>
        </ul>
        
        <h3>üéØ Aprendizaje Supervisado:</h3>
        <ul>
            <li>‚Ä¢ <b>Regresi√≥n Lineal:</b> Implementaci√≥n NumPy pura</li>
            <li>‚Ä¢ <b>√Årboles de Decisi√≥n:</b> Algoritmo CART</li>
            <li>‚Ä¢ <b>SVM:</b> Descenso por gradiente</li>
            <li>‚Ä¢ <b>Visualizaciones:</b> Compatibles con PyInstaller</li>
        </ul>
        
        <h3>üîç Aprendizaje No Supervisado:</h3>
        <ul>
            <li>‚Ä¢ <b>K-Means:</b> Con evaluaci√≥n de K √≥ptimo</li>
            <li>‚Ä¢ <b>DBSCAN:</b> Detecci√≥n de outliers</li>
            <li>‚Ä¢ <b>PCA:</b> An√°lisis de componentes principales</li>
            <li>‚Ä¢ <b>Gr√°ficas:</b> Scatter plots reales con datos</li>
        </ul>
        
        <h3>üì¶ Generar ejecutable:</h3>
        <p><code>pyinstaller CalidadAgua_MINIMAL_ML.spec</code></p>
        
        <h3>üí° Ventajas:</h3>
        <ul>
            <li>‚Ä¢ Gr√°ficas detalladas con puntos de datos reales</li>
            <li>‚Ä¢ Proyecciones PCA autom√°ticas para visualizaci√≥n</li>
            <li>‚Ä¢ Detecci√≥n visual de outliers y clusters</li>
            <li>‚Ä¢ Ejecutables peque√±os y r√°pidos</li>
        </ul>
        
        <p><b>Nota:</b> Sistema optimizado para generar ejecutables estables 
        con visualizaciones de Machine Learning detalladas.</p>
        """

        msg = QMessageBox(self)
        msg.setWindowTitle("Ayuda - Sistema Compatible")
        msg.setTextFormat(Qt.RichText)
        msg.setText(help_text)
        msg.setIcon(QMessageBox.Information)
        msg.exec_()

    def show_about(self):
        """Mostrar informaci√≥n del sistema compatible"""
        # Verificar qu√© est√° disponible
        supervisado_estado = "Compatible" if SUPERVISADO_AVAILABLE else "No disponible"
        no_supervisado_estado = "Disponible" if NO_SUPERVISADO_AVAILABLE else "No disponible"

        about_text = f"""
        <h2>Sistema ML Compatible - PyInstaller Ready</h2>
        <p><b>Versi√≥n:</b> 3.0 - Compatible</p>
        <p><b>Objetivo:</b> Generar ejecutables sin conflictos</p>
        
        <h3>Tecnolog√≠as Core:</h3>
        <ul>
            <li>‚Ä¢ Python {sys.version.split()[0]}</li>
            <li>‚Ä¢ PyQt5 - Interfaz gr√°fica</li>
            <li>‚Ä¢ NumPy - C√°lculos matriciales</li>
            <li>‚Ä¢ Pandas - Manejo de datos</li>
            <li>‚Ä¢ Matplotlib - Visualizaciones</li>
            <li>‚Ä¢ Scikit-learn - ML No Supervisado</li>
        </ul>
        
        <h3>Estado de M√≥dulos:</h3>
        <ul>
            <li>‚Ä¢ Supervisado Compatible: {supervisado_estado}</li>
            <li>‚Ä¢ No Supervisado: {no_supervisado_estado}</li>
        </ul>
        
        <h3>Optimizaciones PyInstaller:</h3>
        <ul>
            <li>‚Ä¢ Dependencias controladas y optimizadas</li>
            <li>‚Ä¢ Gr√°ficas corregidas para ejecutables</li>
            <li>‚Ä¢ Manejo de memoria optimizado</li>
            <li>‚Ä¢ Compatible con Windows/Linux/Mac</li>
        </ul>
        
        <h3>Generaci√≥n de ejecutable:</h3>
        <ul>
            <li>‚Ä¢ Tama√±o estimado: 200-300 MB</li>
            <li>‚Ä¢ Tiempo de carga: 5-10 segundos</li>
            <li>‚Ä¢ Sin instalaci√≥n de dependencias</li>
            <li>‚Ä¢ Visualizaciones ML completamente funcionales</li>
        </ul>
        
        <p><i>Versi√≥n optimizada para distribuci√≥n como ejecutable independiente</i></p>
        """

        msg = QMessageBox(self)
        msg.setWindowTitle("Acerca de - Compatible")
        msg.setTextFormat(Qt.RichText)
        msg.setText(about_text)
        msg.setIcon(QMessageBox.Information)
        msg.exec_()

    def on_regresar_menu(self):
        """Handler para regresar al men√∫ principal"""
        # Cerrar ventanas secundarias
        for window in [self.supervisado_window, self.no_supervisado_window]:
            if window:
                window.close()

        self.regresar_menu.emit()
        self.close()

    def closeEvent(self, event):
        """Manejar cierre de la ventana"""
        # Cerrar ventanas secundarias
        for window in [self.supervisado_window, self.no_supervisado_window]:
            if window:
                window.close()

        self.ventana_cerrada.emit()
        event.accept()


# ==================== USAR LA CLASE COMPATIBLE ====================

# Asignar la clase compatible como la clase principal
SegmentacionML = SegmentacionMLCompatible

# ==================== FUNCI√ìN PRINCIPAL ====================

def main():
    """Funci√≥n principal para ejecutar el sistema ML compatible"""
    app = QApplication(sys.argv)

    # Configurar estilos de la aplicaci√≥n
    app.setStyle("Fusion")
    app.setApplicationName("Sistema ML Compatible - PyInstaller")

    # Crear y mostrar ventana
    window = SegmentacionMLCompatible()
    window.show()

    # Mensaje de bienvenida
    QTimer.singleShot(500, lambda: print("""
    ==========================================
    Sistema ML Compatible v3.0 - PyInstaller
    ==========================================
    Sistema iniciado correctamente
    
    M√≥dulos compatibles:
    - Supervisado Compatible: {}
    - No Supervisado: {}
    
    Caracter√≠sticas PyInstaller:
    - Implementaciones NumPy optimizadas
    - Gr√°ficas detalladas corregidas
    - Dependencias m√≠nimas controladas
    - Ejecutables estables y funcionales
    ==========================================
    """.format(
        "Disponible" if SUPERVISADO_AVAILABLE else "No disponible",
        "Disponible" if NO_SUPERVISADO_AVAILABLE else "No disponible"
    )))

    sys.exit(app.exec_())


if __name__ == "__main__":
    main()