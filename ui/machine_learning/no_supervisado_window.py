"""
no_supervisado_window.py - Ventana de Aprendizaje No Supervisado
Clustering, PCA y an√°lisis exploratorio
"""

import sys
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel,
                             QPushButton, QFrame, QApplication, QMessageBox,
                             QTabWidget, QGridLayout, QGroupBox)
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QFont

# Importar sistema de temas
try:
    from darkmode.theme_manager import ThemedWidget, ThemeManager
except ImportError:
    # Fallback si no existe darkmode
    class ThemedWidget:
        def __init__(self):
            pass
    class ThemeManager:
        @staticmethod
        def toggle_theme():
            pass
        @staticmethod
        def is_dark_theme():
            return False


class NoSupervisadoWindow(QWidget, ThemedWidget):
    """Ventana para an√°lisis de aprendizaje no supervisado"""

    def __init__(self):
        QWidget.__init__(self)
        ThemedWidget.__init__(self)
        self.setup_ui()
        self.apply_styles()

    def setup_ui(self):
        """Configurar la interfaz de usuario"""
        self.setWindowTitle("üîç Aprendizaje No Supervisado - Calidad del Agua")
        self.setMinimumSize(1000, 700)

        main_layout = QVBoxLayout()
        main_layout.setSpacing(20)
        main_layout.setContentsMargins(25, 25, 25, 25)

        # Header
        header_layout = self.create_header()
        main_layout.addLayout(header_layout)

        # T√≠tulo principal
        title_label = QLabel("üîç Aprendizaje No Supervisado")
        title_label.setObjectName("mainTitle")
        title_label.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(title_label)

        # Subt√≠tulo
        subtitle = QLabel("Descubrimiento de patrones y agrupamiento en datos de calidad del agua")
        subtitle.setObjectName("subtitle")
        subtitle.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(subtitle)

        # Tabs principales
        self.create_tabs(main_layout)

        # Footer con botones
        footer_layout = self.create_footer()
        main_layout.addLayout(footer_layout)

        self.setLayout(main_layout)

    def create_header(self):
        """Crear header con bot√≥n de tema"""
        header_layout = QHBoxLayout()

        # Logo
        logo_label = QLabel("üîç No Supervisado")
        logo_label.setObjectName("logoLabel")

        # Spacer
        header_layout.addWidget(logo_label)
        header_layout.addStretch()

        # Bot√≥n de tema
        self.theme_button = QPushButton("üåô")
        self.theme_button.setObjectName("themeButton")
        self.theme_button.setFixedSize(40, 40)
        self.theme_button.clicked.connect(self.toggle_theme)

        header_layout.addWidget(self.theme_button)

        return header_layout

    def create_tabs(self, parent_layout):
        """Crear pesta√±as principales"""
        self.tab_widget = QTabWidget()
        self.tab_widget.setObjectName("mainTabs")

        # Tab 1: Clustering
        clustering_tab = self.create_clustering_tab()
        self.tab_widget.addTab(clustering_tab, "üéØ Clustering")

        # Tab 2: PCA
        pca_tab = self.create_pca_tab()
        self.tab_widget.addTab(pca_tab, "üìä PCA")

        # Tab 3: An√°lisis Exploratorio
        exploratory_tab = self.create_exploratory_tab()
        self.tab_widget.addTab(exploratory_tab, "üîç Exploratorio")

        parent_layout.addWidget(self.tab_widget)

    def create_clustering_tab(self):
        """Crear pesta√±a de clustering"""
        tab = QWidget()
        layout = QVBoxLayout()

        # Informaci√≥n
        info_frame = QFrame()
        info_frame.setObjectName("infoFrame")
        info_layout = QVBoxLayout()

        info_title = QLabel("üéØ An√°lisis de Clustering")
        info_title.setObjectName("sectionTitle")
        info_layout.addWidget(info_title)

        info_text = QLabel(
            "Descubre grupos naturales en tus datos de calidad del agua.\n"
            "Identifica patrones de contaminaci√≥n y estaciones similares."
        )
        info_text.setObjectName("infoText")
        info_text.setWordWrap(True)
        info_layout.addWidget(info_text)

        info_frame.setLayout(info_layout)
        layout.addWidget(info_frame)

        # Opciones de clustering
        options_group = QGroupBox("Algoritmos de Clustering")
        options_layout = QGridLayout()

        # K-Means
        kmeans_btn = QPushButton("üéØ K-Means\nAgrupar por similitud")
        kmeans_btn.setObjectName("algorithmButton")
        kmeans_btn.clicked.connect(self.show_kmeans_info)

        # Clustering Jer√°rquico
        hierarchical_btn = QPushButton("üå≥ Jer√°rquico\nDendrogramas")
        hierarchical_btn.setObjectName("algorithmButton")
        hierarchical_btn.clicked.connect(self.show_hierarchical_info)

        # DBSCAN
        dbscan_btn = QPushButton("üîç DBSCAN\nDetecci√≥n de anomal√≠as")
        dbscan_btn.setObjectName("algorithmButton")
        dbscan_btn.clicked.connect(self.show_dbscan_info)

        options_layout.addWidget(kmeans_btn, 0, 0)
        options_layout.addWidget(hierarchical_btn, 0, 1)
        options_layout.addWidget(dbscan_btn, 0, 2)

        options_group.setLayout(options_layout)
        layout.addWidget(options_group)

        layout.addStretch()
        tab.setLayout(layout)
        return tab

    def create_pca_tab(self):
        """Crear pesta√±a de PCA"""
        tab = QWidget()
        layout = QVBoxLayout()

        # Informaci√≥n
        info_frame = QFrame()
        info_frame.setObjectName("infoFrame")
        info_layout = QVBoxLayout()

        info_title = QLabel("üìä An√°lisis de Componentes Principales (PCA)")
        info_title.setObjectName("sectionTitle")
        info_layout.addWidget(info_title)

        info_text = QLabel(
            "Reduce la dimensionalidad de tus datos manteniendo la informaci√≥n m√°s importante.\n"
            "Identifica las variables m√°s influyentes en la calidad del agua."
        )
        info_text.setObjectName("infoText")
        info_text.setWordWrap(True)
        info_layout.addWidget(info_text)

        info_frame.setLayout(info_layout)
        layout.addWidget(info_frame)

        # Opciones de PCA
        options_group = QGroupBox("An√°lisis de Componentes")
        options_layout = QGridLayout()

        # PCA Est√°ndar
        pca_btn = QPushButton("üìä PCA B√°sico\nComponentes principales")
        pca_btn.setObjectName("algorithmButton")
        pca_btn.clicked.connect(self.show_pca_info)

        # An√°lisis de Varianza
        variance_btn = QPushButton("üìà Varianza Explicada\nImportancia de componentes")
        variance_btn.setObjectName("algorithmButton")
        variance_btn.clicked.connect(self.show_variance_info)

        # Biplot
        biplot_btn = QPushButton("üéØ Biplot\nVisualizaci√≥n 2D/3D")
        biplot_btn.setObjectName("algorithmButton")
        biplot_btn.clicked.connect(self.show_biplot_info)

        options_layout.addWidget(pca_btn, 0, 0)
        options_layout.addWidget(variance_btn, 0, 1)
        options_layout.addWidget(biplot_btn, 0, 2)

        options_group.setLayout(options_layout)
        layout.addWidget(options_group)

        layout.addStretch()
        tab.setLayout(layout)
        return tab

    def create_exploratory_tab(self):
        """Crear pesta√±a de an√°lisis exploratorio"""
        tab = QWidget()
        layout = QVBoxLayout()

        # Informaci√≥n
        info_frame = QFrame()
        info_frame.setObjectName("infoFrame")
        info_layout = QVBoxLayout()

        info_title = QLabel("üîç An√°lisis Exploratorio de Datos")
        info_title.setObjectName("sectionTitle")
        info_layout.addWidget(info_title)

        info_text = QLabel(
            "Explora relaciones ocultas y patrones en tus datos de calidad del agua.\n"
            "Descubre correlaciones y distribuciones importantes."
        )
        info_text.setObjectName("infoText")
        info_text.setWordWrap(True)
        info_layout.addWidget(info_text)

        info_frame.setLayout(info_layout)
        layout.addWidget(info_frame)

        # Opciones de an√°lisis exploratorio
        options_group = QGroupBox("Herramientas Exploratorias")
        options_layout = QGridLayout()

        # Matriz de correlaci√≥n
        corr_btn = QPushButton("üîó Matriz Correlaci√≥n\nRelaciones entre variables")
        corr_btn.setObjectName("algorithmButton")
        corr_btn.clicked.connect(self.show_correlation_info)

        # Distribuciones
        dist_btn = QPushButton("üìä Distribuciones\nHistogramas y boxplots")
        dist_btn.setObjectName("algorithmButton")
        dist_btn.clicked.connect(self.show_distribution_info)

        # Outliers
        outlier_btn = QPushButton("‚ö†Ô∏è Detecci√≥n Outliers\nValores at√≠picos")
        outlier_btn.setObjectName("algorithmButton")
        outlier_btn.clicked.connect(self.show_outlier_info)

        options_layout.addWidget(corr_btn, 0, 0)
        options_layout.addWidget(dist_btn, 0, 1)
        options_layout.addWidget(outlier_btn, 0, 2)

        options_group.setLayout(options_layout)
        layout.addWidget(options_group)

        layout.addStretch()
        tab.setLayout(layout)
        return tab

    def create_footer(self):
        """Crear footer con controles"""
        footer_layout = QHBoxLayout()

        # Bot√≥n de ayuda
        help_btn = QPushButton("‚ùì Ayuda")
        help_btn.setObjectName("secondaryButton")
        help_btn.clicked.connect(self.show_help)

        # Bot√≥n de configuraci√≥n
        config_btn = QPushButton("‚öôÔ∏è Config")
        config_btn.setObjectName("secondaryButton")
        config_btn.clicked.connect(self.show_config)

        # Spacer
        footer_layout.addWidget(help_btn)
        footer_layout.addWidget(config_btn)
        footer_layout.addStretch()

        # Bot√≥n cerrar
        close_btn = QPushButton("‚ùå Cerrar")
        close_btn.setObjectName("dangerButton")
        close_btn.clicked.connect(self.close)

        footer_layout.addWidget(close_btn)

        return footer_layout

    def apply_styles(self):
        """Aplicar estilos CSS"""
        self.setStyleSheet("""
            QWidget {
                font-family: 'Segoe UI', Arial, sans-serif;
                background-color: #f8f9fa;
            }

            #logoLabel {
                font-size: 16px;
                font-weight: bold;
                color: #495057;
            }

            #themeButton {
                border: 2px solid #dee2e6;
                border-radius: 20px;
                background: #ffffff;
                font-size: 16px;
            }

            #themeButton:hover {
                background: #e9ecef;
                border-color: #adb5bd;
            }

            #mainTitle {
                font-size: 32px;
                font-weight: bold;
                color: #2c3e50;
                margin: 15px 0;
            }

            #subtitle {
                font-size: 16px;
                color: #6c757d;
                margin-bottom: 20px;
            }

            #mainTabs {
                background: #ffffff;
                border: 1px solid #dee2e6;
                border-radius: 10px;
            }

            #mainTabs::pane {
                border: 1px solid #dee2e6;
                border-radius: 8px;
                background: #ffffff;
                margin-top: 5px;
            }

            #mainTabs::tab-bar {
                alignment: center;
            }

            QTabBar::tab {
                background: #f8f9fa;
                color: #495057;
                padding: 12px 20px;
                margin-right: 2px;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                font-weight: 600;
                font-size: 14px;
                min-width: 120px;
                border: 1px solid #dee2e6;
            }

            QTabBar::tab:selected {
                background: #007bff;
                color: white;
                border-color: #007bff;
            }

            QTabBar::tab:hover:!selected {
                background: #e9ecef;
                color: #007bff;
            }

            #infoFrame {
                background: linear-gradient(135deg, #e3f2fd 0%, #bbdefb 100%);
                border: 1px solid #2196f3;
                border-radius: 10px;
                padding: 20px;
                margin: 10px 0;
            }

            #sectionTitle {
                font-size: 20px;
                font-weight: bold;
                color: #1565c0;
                margin-bottom: 10px;
            }

            #infoText {
                font-size: 14px;
                color: #424242;
                line-height: 1.5;
            }

            QGroupBox {
                font-weight: bold;
                font-size: 16px;
                color: #2c3e50;
                border: 2px solid #dee2e6;
                border-radius: 10px;
                margin-top: 20px;
                padding-top: 15px;
                background: #ffffff;
            }

            QGroupBox::title {
                subcontrol-origin: margin;
                left: 15px;
                padding: 0 10px;
                background: #ffffff;
                color: #2c3e50;
            }

            #algorithmButton {
                background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
                border: 2px solid #28a745;
                border-radius: 12px;
                padding: 20px;
                font-size: 14px;
                font-weight: 600;
                color: #155724;
                text-align: center;
                min-height: 80px;
                max-width: 200px;
            }

            #algorithmButton:hover {
                background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
                border-color: #20c997;
                transform: translateY(-2px);
            }

            #algorithmButton:pressed {
                background: linear-gradient(135deg, #c3e6cb 0%, #b1dfbb 100%);
                transform: translateY(0px);
            }

            #secondaryButton {
                background: #6c757d;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: 600;
                font-size: 13px;
            }

            #secondaryButton:hover {
                background: #5a6268;
            }

            #dangerButton {
                background: #dc3545;
                color: white;
                border: none;
                border-radius: 6px;
                padding: 8px 16px;
                font-weight: 600;
                font-size: 13px;
            }

            #dangerButton:hover {
                background: #c82333;
            }
        """)

    def toggle_theme(self):
        """Alternar tema"""
        try:
            theme_manager = ThemeManager()
            theme_manager.toggle_theme()

            if theme_manager.is_dark_theme():
                self.theme_button.setText("‚òÄÔ∏è")
            else:
                self.theme_button.setText("üåô")
        except Exception:
            # Fallback simple
            if self.theme_button.text() == "üåô":
                self.theme_button.setText("‚òÄÔ∏è")
            else:
                self.theme_button.setText("üåô")

    # M√©todos de informaci√≥n para cada algoritmo
    def show_kmeans_info(self):
        """Mostrar informaci√≥n sobre K-Means"""
        QMessageBox.information(
            self,
            "üéØ K-Means Clustering",
            "<h3>K-Means Clustering</h3>"
            "<p><b>¬øQu√© hace?</b><br>"
            "Agrupa las muestras de agua en K grupos bas√°ndose en similitudes "
            "en los par√°metros de calidad.</p>"
            
            "<p><b>Casos de uso:</b></p>"
            "<ul>"
            "<li>‚Ä¢ Identificar tipos de agua similares</li>"
            "<li>‚Ä¢ Agrupar estaciones de monitoreo</li>"
            "<li>‚Ä¢ Clasificar niveles de contaminaci√≥n</li>"
            "</ul>"
            
            "<p><b>Par√°metros:</b> N√∫mero de clusters (K), algoritmo de inicializaci√≥n</p>"
            
            "<p><i>‚ö†Ô∏è M√≥dulo en desarrollo. Funcionalidad completa pr√≥ximamente.</i></p>"
        )

    def show_hierarchical_info(self):
        """Mostrar informaci√≥n sobre clustering jer√°rquico"""
        QMessageBox.information(
            self,
            "üå≥ Clustering Jer√°rquico",
            "<h3>Clustering Jer√°rquico</h3>"
            "<p><b>¬øQu√© hace?</b><br>"
            "Crea un √°rbol (dendrograma) que muestra las relaciones jer√°rquicas "
            "entre muestras de agua.</p>"
            
            "<p><b>Casos de uso:</b></p>"
            "<ul>"
            "<li>‚Ä¢ Visualizar relaciones entre estaciones</li>"
            "<li>‚Ä¢ Encontrar grupos naturales</li>"
            "<li>‚Ä¢ An√°lisis de similitud temporal</li>"
            "</ul>"
            
            "<p><b>Ventajas:</b> No necesita especificar n√∫mero de clusters previamente</p>"
            
            "<p><i>‚ö†Ô∏è M√≥dulo en desarrollo. Funcionalidad completa pr√≥ximamente.</i></p>"
        )

    def show_dbscan_info(self):
        """Mostrar informaci√≥n sobre DBSCAN"""
        QMessageBox.information(
            self,
            "üîç DBSCAN",
            "<h3>DBSCAN (Density-Based Clustering)</h3>"
            "<p><b>¬øQu√© hace?</b><br>"
            "Encuentra grupos bas√°ndose en densidad y detecta autom√°ticamente "
            "valores at√≠picos (outliers).</p>"
            
            "<p><b>Casos de uso:</b></p>"
            "<ul>"
            "<li>‚Ä¢ Detectar contaminaci√≥n an√≥mala</li>"
            "<li>‚Ä¢ Identificar eventos extraordinarios</li>"
            "<li>‚Ä¢ Filtrar datos err√≥neos</li>"
            "</ul>"
            
            "<p><b>Ventajas:</b> Detecta autom√°ticamente outliers y no requiere "
            "especificar n√∫mero de clusters</p>"
            
            "<p><i>‚ö†Ô∏è M√≥dulo en desarrollo. Funcionalidad completa pr√≥ximamente.</i></p>"
        )

    def show_pca_info(self):
        """Mostrar informaci√≥n sobre PCA"""
        QMessageBox.information(
            self,
            "üìä PCA - An√°lisis de Componentes Principales",
            "<h3>PCA (Principal Component Analysis)</h3>"
            "<p><b>¬øQu√© hace?</b><br>"
            "Reduce la dimensionalidad manteniendo la m√°xima varianza posible. "
            "Identifica las combinaciones de variables m√°s importantes.</p>"
            
            "<p><b>Casos de uso:</b></p>"
            "<ul>"
            "<li>‚Ä¢ Simplificar datasets complejos</li>"
            "<li>‚Ä¢ Identificar variables m√°s influyentes</li>"
            "<li>‚Ä¢ Visualizar datos en 2D/3D</li>"
            "<li>‚Ä¢ Preprocesamiento para otros algoritmos</li>"
            "</ul>"
            
            "<p><b>Interpretaci√≥n:</b> Los primeros componentes explican la mayor "
            "variabilidad en los datos de calidad del agua.</p>"
            
            "<p><i>‚ö†Ô∏è M√≥dulo en desarrollo. Funcionalidad completa pr√≥ximamente.</i></p>"
        )

    def show_variance_info(self):
        """Mostrar informaci√≥n sobre an√°lisis de varianza"""
        QMessageBox.information(
            self,
            "üìà An√°lisis de Varianza Explicada",
            "<h3>Varianza Explicada por Componentes</h3>"
            "<p><b>¬øQu√© muestra?</b><br>"
            "El porcentaje de informaci√≥n (varianza) que captura cada "
            "componente principal.</p>"
            
            "<p><b>Interpretaci√≥n:</b></p>"
            "<ul>"
            "<li>‚Ä¢ Componente 1: Mayor variabilidad</li>"
            "<li>‚Ä¢ Componente 2: Segunda mayor variabilidad</li>"
            "<li>‚Ä¢ Y as√≠ sucesivamente...</li>"
            "</ul>"
            
            "<p><b>Regla pr√°ctica:</b> Mantener componentes que expliquen "
            "al menos 80-90% de la varianza total.</p>"
            
            "<p><i>‚ö†Ô∏è M√≥dulo en desarrollo. Funcionalidad completa pr√≥ximamente.</i></p>"
        )

    def show_biplot_info(self):
        """Mostrar informaci√≥n sobre biplot"""
        QMessageBox.information(
            self,
            "üéØ Biplot",
            "<h3>Biplot - Visualizaci√≥n PCA</h3>"
            "<p><b>¬øQu√© muestra?</b><br>"
            "Combina la visualizaci√≥n de las muestras y las variables "
            "en el mismo gr√°fico.</p>"
            
            "<p><b>Elementos:</b></p>"
            "<ul>"
            "<li>‚Ä¢ Puntos: Muestras de agua individuales</li>"
            "<li>‚Ä¢ Flechas: Variables (pH, turbidez, etc.)</li>"
            "<li>‚Ä¢ Longitud de flecha: Importancia de la variable</li>"
            "<li>‚Ä¢ √Ångulo entre flechas: Correlaci√≥n</li>"
            "</ul>"
            
            "<p><b>Interpretaci√≥n:</b> Flechas en la misma direcci√≥n indican "
            "variables correlacionadas positivamente.</p>"
            
            "<p><i>‚ö†Ô∏è M√≥dulo en desarrollo. Funcionalidad completa pr√≥ximamente.</i></p>"
        )

    def show_correlation_info(self):
        """Mostrar informaci√≥n sobre matriz de correlaci√≥n"""
        QMessageBox.information(
            self,
            "üîó Matriz de Correlaci√≥n",
            "<h3>Matriz de Correlaci√≥n</h3>"
            "<p><b>¬øQu√© muestra?</b><br>"
            "Las relaciones lineales entre todas las variables de "
            "calidad del agua.</p>"
            
            "<p><b>Valores:</b></p>"
            "<ul>"
            "<li>‚Ä¢ +1: Correlaci√≥n positiva perfecta</li>"
            "<li>‚Ä¢ 0: Sin correlaci√≥n lineal</li>"
            "<li>‚Ä¢ -1: Correlaci√≥n negativa perfecta</li>"
            "</ul>"
            
            "<p><b>Interpretaci√≥n para calidad del agua:</b></p>"
            "<ul>"
            "<li>‚Ä¢ pH vs Ox√≠geno: Generalmente positiva</li>"
            "<li>‚Ä¢ Turbidez vs Coliformes: Positiva</li>"
            "<li>‚Ä¢ Temperatura vs Ox√≠geno: Negativa</li>"
            "</ul>"
            
            "<p><i>‚ö†Ô∏è M√≥dulo en desarrollo. Funcionalidad completa pr√≥ximamente.</i></p>"
        )

    def show_distribution_info(self):
        """Mostrar informaci√≥n sobre distribuciones"""
        QMessageBox.information(
            self,
            "üìä An√°lisis de Distribuciones",
            "<h3>Distribuciones de Variables</h3>"
            "<p><b>¬øQu√© analiza?</b><br>"
            "La forma en que se distribuyen los valores de cada "
            "par√°metro de calidad del agua.</p>"
            
            "<p><b>Visualizaciones:</b></p>"
            "<ul>"
            "<li>‚Ä¢ Histogramas: Frecuencia de valores</li>"
            "<li>‚Ä¢ Box plots: Mediana, cuartiles, outliers</li>"
            "<li>‚Ä¢ Curvas de densidad: Distribuci√≥n suavizada</li>"
            "</ul>"
            
            "<p><b>Informaci√≥n √∫til:</b></p>"
            "<ul>"
            "<li>‚Ä¢ Valores t√≠picos vs excepcionales</li>"
            "<li>‚Ä¢ Simetr√≠a de los datos</li>"
            "<li>‚Ä¢ Presencia de m√∫ltiples picos</li>"
            "</ul>"
            
            "<p><i>‚ö†Ô∏è M√≥dulo en desarrollo. Funcionalidad completa pr√≥ximamente.</i></p>"
        )

    def show_outlier_info(self):
        """Mostrar informaci√≥n sobre detecci√≥n de outliers"""
        QMessageBox.information(
            self,
            "‚ö†Ô∏è Detecci√≥n de Outliers",
            "<h3>Detecci√≥n de Valores At√≠picos</h3>"
            "<p><b>¬øQu√© son los outliers?</b><br>"
            "Valores que se desv√≠an significativamente del patr√≥n "
            "normal en los datos de calidad del agua.</p>"
            
            "<p><b>M√©todos de detecci√≥n:</b></p>"
            "<ul>"
            "<li>‚Ä¢ IQR (Rango Intercuart√≠lico)</li>"
            "<li>‚Ä¢ Z-Score (Desviaciones est√°ndar)</li>"
            "<li>‚Ä¢ Isolation Forest</li>"
            "<li>‚Ä¢ DBSCAN clustering</li>"
            "</ul>"
            
            "<p><b>Causas posibles:</b></p>"
            "<ul>"
            "<li>‚Ä¢ Eventos de contaminaci√≥n</li>"
            "<li>‚Ä¢ Errores de medici√≥n</li>"
            "<li>‚Ä¢ Condiciones ambientales extremas</li>"
            "</ul>"
            
            "<p><i>‚ö†Ô∏è M√≥dulo en desarrollo. Funcionalidad completa pr√≥ximamente.</i></p>"
        )

    def show_help(self):
        """Mostrar ayuda general"""
        QMessageBox.information(
            self,
            "‚ùì Ayuda - Aprendizaje No Supervisado",
            "<h3>üí° Gu√≠a de Uso</h3>"
            
            "<p><b>üéØ Clustering:</b><br>"
            "Usa K-Means para grupos definidos, Jer√°rquico para explorar "
            "relaciones, DBSCAN para detectar anomal√≠as.</p>"
            
            "<p><b>üìä PCA:</b><br>"
            "Ideal para reducir dimensionalidad y entender qu√© variables "
            "son m√°s importantes en tu dataset.</p>"
            
            "<p><b>üîç An√°lisis Exploratorio:</b><br>"
            "Comienza siempre aqu√≠ para entender la estructura de tus datos "
            "antes de aplicar algoritmos m√°s complejos.</p>"
            
            "<p><b>üîÑ Flujo recomendado:</b></p>"
            "<ol>"
            "<li>1. An√°lisis exploratorio y correlaciones</li>"
            "<li>2. Detecci√≥n y tratamiento de outliers</li>"
            "<li>3. PCA para reducir dimensionalidad</li>"
            "<li>4. Clustering para encontrar grupos</li>"
            "</ol>"
            
            "<p><i>üí° Tip: Cada an√°lisis proporciona insights √∫nicos. "
            "Combina varios m√©todos para obtener una visi√≥n completa.</i></p>"
        )

    def show_config(self):
        """Mostrar configuraci√≥n"""
        QMessageBox.information(
            self,
            "‚öôÔ∏è Configuraci√≥n - No Supervisado",
            "<h3>üîß Configuraci√≥n del M√≥dulo</h3>"
            
            "<p><b>üì¶ Dependencias requeridas:</b></p>"
            "<ul>"
            "<li>‚Ä¢ scikit-learn (clustering, PCA)</li>"
            "<li>‚Ä¢ matplotlib (visualizaciones)</li>"
            "<li>‚Ä¢ seaborn (gr√°ficos estad√≠sticos)</li>"
            "<li>‚Ä¢ pandas & numpy (manipulaci√≥n datos)</li>"
            "</ul>"
            
            "<p><b>üéõÔ∏è Par√°metros configurables:</b></p>"
            "<ul>"
            "<li>‚Ä¢ N√∫mero de clusters (K-Means)</li>"
            "<li>‚Ä¢ N√∫mero de componentes (PCA)</li>"
            "<li>‚Ä¢ Umbrales de outliers</li>"
            "<li>‚Ä¢ M√©tricas de distancia</li>"
            "</ul>"
            
            "<p><b>üíæ Exportaci√≥n:</b><br>"
            "Los resultados se pueden exportar en formatos CSV, "
            "Excel y PNG (gr√°ficos).</p>"
            
            "<p><b>üöÄ Estado:</b> M√≥dulo en desarrollo activo</p>"
        )

    def closeEvent(self, event):
        """Manejar evento de cierre"""
        if hasattr(self, 'theme_manager'):
            self.theme_manager.remove_observer(self)
        event.accept()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = NoSupervisadoWindow()
    window.show()
    sys.exit(app.exec_())