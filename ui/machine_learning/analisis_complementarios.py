"""
analisis_complementarios.py - Ventana de An√°lisis Complementarios
Contiene: An√°lisis de Calidad, Optimizaci√≥n, Comparaci√≥n de M√©todos
"""

import sys
import multiprocessing
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QPushButton, QLabel,
                             QHBoxLayout, QFrame, QProgressBar, QSplitter,
                             QGroupBox, QGridLayout, QMessageBox)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QFont

# Importar sistema de temas
from darkmode import ThemedWidget, ThemeManager
from resultados_visuales import ResultadosVisuales
from data_cache import DataCache


# Funciones simuladas para an√°lisis complementarios
def analizar_calidad_agua_proceso():
    """An√°lisis b√°sico de calidad del agua"""
    import time
    time.sleep(2)  # Simular procesamiento

    return {
        'tipo': 'calidad_agua',
        'estadisticas': {
            'total_muestras': 150,
            'ph_promedio': 7.2,
            'oxigeno_promedio': 8.5,
            'turbidez_promedio': 2.1,
            'conductividad_promedio': 520,
            'calidad_promedio': 75.5
        },
        'distribucion': {
            'Excelente': 45,
            'Buena': 60,
            'Regular': 30,
            'Necesita Tratamiento': 15
        },
        'estado_general': 'üü¢ BUENA',
        'mensaje': 'La calidad general del agua es buena'
    }


def optimizar_sistema_proceso():
    """Optimizaci√≥n de hiperpar√°metros"""
    import time
    time.sleep(3)  # Simular procesamiento

    return {
        'tipo': 'optimizacion',
        'resultados': [
            {'configuracion': '50 √°rboles, prof. 5', 'precision': 87.5},
            {'configuracion': '100 √°rboles, prof. 7', 'precision': 92.1},
            {'configuracion': '150 √°rboles, prof. 10', 'precision': 89.8}
        ],
        'mejor_config': {'configuracion': '100 √°rboles, prof. 7', 'precision': 92.1}
    }


def comparar_metodos_proceso():
    """Comparaci√≥n de diferentes algoritmos ML"""
    import time
    time.sleep(2.5)  # Simular procesamiento

    return {
        'tipo': 'comparacion',
        'metodos': [
            {'metodo': 'Random Forest', 'precision': 92.1, 'ventajas': 'Robusto y preciso'},
            {'metodo': 'SVM', 'precision': 89.3, 'ventajas': 'Efectivo con datos complejos'},
            {'metodo': '√Årbol de Decisi√≥n', 'precision': 84.7, 'ventajas': 'F√°cil interpretaci√≥n'}
        ]
    }


class ComplementariosWorker(QThread):
    """Worker thread para an√°lisis complementarios"""
    finished = pyqtSignal(dict, str)
    progress = pyqtSignal(int)
    status_update = pyqtSignal(str)

    def __init__(self, algorithm):
        super().__init__()
        self.algorithm = algorithm
        self.cache = DataCache()

    def run(self):
        try:
            # Verificar cache
            cache_key = f"complementario_{self.algorithm}"
            cached_result = self.cache.get(cache_key)

            if cached_result:
                self.status_update.emit("üì¶ Usando datos en cache...")
                self.progress.emit(100)
                self.finished.emit(cached_result, self.algorithm)
                return

            self.status_update.emit("üìä Iniciando an√°lisis complementario...")
            self.progress.emit(10)

            # Mapeo de funciones
            process_functions = {
                "calidad_agua": analizar_calidad_agua_proceso,
                "optimizar_sistema": optimizar_sistema_proceso,
                "comparar_metodos": comparar_metodos_proceso
            }

            if self.algorithm not in process_functions:
                self.finished.emit({"error": "An√°lisis no reconocido"}, "error")
                return

            self.progress.emit(30)

            # Ejecutar funci√≥n
            result = process_functions[self.algorithm]()
            self.progress.emit(95)

            if 'error' not in result:
                self.cache.set(cache_key, result)

            self.progress.emit(100)
            self.finished.emit(result, self.algorithm)

        except Exception as e:
            self.finished.emit({"error": f"Error en worker: {str(e)}"}, "error")


class AnalisisComplementarios(QWidget, ThemedWidget):
    """Ventana de An√°lisis Complementarios"""

    def __init__(self):
        QWidget.__init__(self)
        ThemedWidget.__init__(self)

        self.worker = None
        self.cache = DataCache()
        self.setup_ui()
        self.apply_styles()

    def setup_ui(self):
        """Configurar interfaz de usuario"""
        self.setWindowTitle("üìä An√°lisis Complementarios - ML Calidad del Agua")
        self.setMinimumSize(1200, 800)

        main_layout = QVBoxLayout()
        main_layout.setSpacing(15)
        main_layout.setContentsMargins(20, 20, 20, 20)

        # Header
        header_layout = self.create_header()
        main_layout.addLayout(header_layout)

        # Splitter principal
        splitter = QSplitter(Qt.Horizontal)

        # Panel izquierdo - Controles
        control_panel = self.create_control_panel()
        splitter.addWidget(control_panel)

        # Panel derecho - Resultados
        self.resultados_widget = ResultadosVisuales()
        splitter.addWidget(self.resultados_widget)

        splitter.setSizes([400, 800])
        main_layout.addWidget(splitter)

        # Barra de estado
        status_layout = self.create_status_bar()
        main_layout.addLayout(status_layout)

        self.setLayout(main_layout)

    def create_header(self):
        """Crear header de la ventana"""
        header_layout = QHBoxLayout()

        # T√≠tulo y descripci√≥n
        title_layout = QVBoxLayout()
        title_layout.setSpacing(5)

        title = QLabel("üìä An√°lisis Complementarios")
        title.setObjectName("windowTitle")

        desc = QLabel("Evaluaci√≥n, optimizaci√≥n y comparaci√≥n de sistemas ML")
        desc.setObjectName("windowDesc")

        title_layout.addWidget(title)
        title_layout.addWidget(desc)

        header_layout.addLayout(title_layout)
        header_layout.addStretch()

        # Bot√≥n de cerrar
        close_button = QPushButton("‚úï")
        close_button.setObjectName("closeButton")
        close_button.setFixedSize(30, 30)
        close_button.clicked.connect(self.close)

        header_layout.addWidget(close_button)

        return header_layout

    def create_control_panel(self):
        """Crear panel de controles"""
        group = QGroupBox("üìä An√°lisis Complementarios del Sistema")
        group.setObjectName("controlGroup")

        layout = QVBoxLayout()
        layout.setSpacing(25)

        # Informaci√≥n introductoria
        intro_frame = self.create_intro_section()
        layout.addWidget(intro_frame)

        # An√°lisis disponibles
        analysis_section = self.create_analysis_section()
        layout.addWidget(analysis_section)

        layout.addStretch()

        # Controles de utilidad
        utility_controls = self.create_utility_controls()
        layout.addWidget(utility_controls)

        group.setLayout(layout)
        return group

    def create_intro_section(self):
        """Crear secci√≥n introductoria"""
        intro_frame = QFrame()
        intro_frame.setObjectName("introFrame")

        layout = QVBoxLayout(intro_frame)
        layout.setSpacing(12)
        layout.setContentsMargins(20, 15, 20, 15)

        title = QLabel("üîß Herramientas de Evaluaci√≥n")
        title.setObjectName("introTitle")

        description = QLabel(
            "Conjunto de herramientas para evaluar, optimizar y comparar "
            "el rendimiento de los sistemas de machine learning:\n\n"
            "üß™ <b>An√°lisis de Calidad:</b> Evaluaci√≥n completa de par√°metros del agua\n"
            "‚öôÔ∏è <b>Optimizaci√≥n:</b> B√∫squeda autom√°tica de mejores configuraciones\n"
            "üìä <b>Comparaci√≥n:</b> Evaluaci√≥n comparativa entre algoritmos"
        )
        description.setObjectName("introText")
        description.setWordWrap(True)

        layout.addWidget(title)
        layout.addWidget(description)

        return intro_frame

    def create_analysis_section(self):
        """Crear secci√≥n de an√°lisis"""
        analysis_frame = QFrame()
        analysis_frame.setObjectName("analysisFrame")

        layout = QVBoxLayout(analysis_frame)
        layout.setSpacing(20)
        layout.setContentsMargins(15, 20, 15, 20)

        # Definir an√°lisis
        analyses = [
            {
                "name": "üß™ An√°lisis de Calidad del Agua",
                "key": "calidad_agua",
                "subtitle": "Evaluaci√≥n Completa de Par√°metros",
                "description": "An√°lisis exhaustivo de pH, ox√≠geno disuelto, turbidez y conductividad",
                "features": [
                    "‚Ä¢ C√°lculo autom√°tico de scores de calidad",
                    "‚Ä¢ Clasificaci√≥n en categor√≠as (Excelente, Buena, etc.)",
                    "‚Ä¢ Estad√≠sticas descriptivas completas",
                    "‚Ä¢ Distribuci√≥n visual de resultados",
                    "‚Ä¢ Recomendaciones de mejora autom√°ticas"
                ],
                "time": "8-12 segundos",
                "color": "#4CAF50",
                "icon": "üß™"
            },
            {
                "name": "‚öôÔ∏è Optimizaci√≥n de Hiperpar√°metros",
                "key": "optimizar_sistema",
                "subtitle": "B√∫squeda Autom√°tica de Configuraciones",
                "description": "Encuentra autom√°ticamente los mejores par√°metros para algoritmos ML",
                "features": [
                    "‚Ä¢ Grid search de hiperpar√°metros",
                    "‚Ä¢ Evaluaci√≥n de m√∫ltiples configuraciones",
                    "‚Ä¢ An√°lisis de trade-offs precisi√≥n/complejidad",
                    "‚Ä¢ Recomendaci√≥n de configuraci√≥n √≥ptima",
                    "‚Ä¢ Visualizaci√≥n comparativa de resultados"
                ],
                "time": "15-20 segundos",
                "color": "#FF9800",
                "icon": "‚öôÔ∏è"
            },
            {
                "name": "üìä Comparaci√≥n de Algoritmos",
                "key": "comparar_metodos",
                "subtitle": "Evaluaci√≥n Comparativa de ML",
                "description": "Compara el rendimiento de diferentes algoritmos de machine learning",
                "features": [
                    "‚Ä¢ Evaluaci√≥n simult√°nea de m√∫ltiples algoritmos",
                    "‚Ä¢ M√©tricas de precisi√≥n y rendimiento",
                    "‚Ä¢ An√°lisis de ventajas y desventajas",
                    "‚Ä¢ Recomendaci√≥n del mejor algoritmo",
                    "‚Ä¢ Gr√°ficos comparativos detallados"
                ],
                "time": "12-18 segundos",
                "color": "#2196F3",
                "icon": "üìä"
            }
        ]

        self.analysis_buttons = {}

        for analysis in analyses:
            analysis_widget = self.create_analysis_widget(analysis)
            layout.addWidget(analysis_widget)

        return analysis_frame

    def create_analysis_widget(self, analysis_config):
        """Crear widget de an√°lisis completo"""
        analysis_frame = QFrame()
        analysis_frame.setObjectName("analysisWidget")
        analysis_frame.setMinimumHeight(180)
        analysis_frame.setMaximumHeight(200)

        main_layout = QHBoxLayout(analysis_frame)
        main_layout.setSpacing(20)
        main_layout.setContentsMargins(20, 15, 20, 15)

        # Panel izquierdo - Informaci√≥n
        info_layout = QVBoxLayout()
        info_layout.setSpacing(8)

        # Header con icono y nombre
        header_layout = QHBoxLayout()

        icon_label = QLabel(analysis_config["icon"])
        icon_label.setObjectName("analysisIcon")

        name_label = QLabel(analysis_config["name"])
        name_label.setObjectName("analysisName")

        header_layout.addWidget(icon_label)
        header_layout.addWidget(name_label)
        header_layout.addStretch()

        # Subt√≠tulo
        subtitle_label = QLabel(analysis_config["subtitle"])
        subtitle_label.setObjectName("analysisSubtitle")

        # Descripci√≥n
        desc_label = QLabel(analysis_config["description"])
        desc_label.setObjectName("analysisDesc")
        desc_label.setWordWrap(True)

        # Caracter√≠sticas (primeras 3)
        features_text = "\n".join(analysis_config["features"][:3])
        features_label = QLabel(features_text)
        features_label.setObjectName("analysisFeatures")
        features_label.setWordWrap(True)

        info_layout.addLayout(header_layout)
        info_layout.addWidget(subtitle_label)
        info_layout.addWidget(desc_label)
        info_layout.addWidget(features_label)
        info_layout.addStretch()

        # Panel derecho - Controles
        controls_layout = QVBoxLayout()
        controls_layout.setSpacing(10)
        controls_layout.setAlignment(Qt.AlignCenter)

        # Indicador de estado
        status_indicator = QLabel("‚ö™")
        status_indicator.setObjectName("statusIndicator")
        status_indicator.setFixedSize(35, 35)
        status_indicator.setAlignment(Qt.AlignCenter)

        # Tiempo estimado
        time_label = QLabel(f"‚è±Ô∏è {analysis_config['time']}")
        time_label.setObjectName("timeLabel")
        time_label.setAlignment(Qt.AlignCenter)

        # Bot√≥n de ejecuci√≥n
        execute_button = QPushButton("üöÄ Ejecutar")
        execute_button.setObjectName("executeButton")
        execute_button.setMinimumHeight(35)
        execute_button.setMinimumWidth(120)
        execute_button.clicked.connect(
            lambda: self.run_analysis(analysis_config["key"])
        )

        # Bot√≥n de informaci√≥n
        info_button = QPushButton("‚ÑπÔ∏è Info")
        info_button.setObjectName("infoButton")
        info_button.setMaximumWidth(80)
        info_button.clicked.connect(
            lambda: self.show_analysis_info(analysis_config)
        )

        controls_layout.addWidget(status_indicator)
        controls_layout.addWidget(time_label)
        controls_layout.addWidget(execute_button)
        controls_layout.addWidget(info_button)

        # Agregar a layout principal
        main_layout.addLayout(info_layout, 3)  # 75% del espacio
        main_layout.addLayout(controls_layout, 1)  # 25% del espacio

        # Guardar referencias
        self.analysis_buttons[analysis_config["key"]] = {
            'frame': analysis_frame,
            'button': execute_button,
            'status': status_indicator,
            'info_button': info_button
        }

        return analysis_frame

    def create_utility_controls(self):
        """Crear controles de utilidad"""
        utility_frame = QFrame()
        utility_frame.setObjectName("utilityFrame")

        layout = QHBoxLayout(utility_frame)
        layout.setSpacing(10)
        layout.setContentsMargins(15, 10, 15, 10)

        # Botones de utilidad
        clear_cache_btn = QPushButton("üóëÔ∏è Limpiar Cache")
        clear_cache_btn.setObjectName("utilityButton")
        clear_cache_btn.clicked.connect(self.clear_cache)

        clear_results_btn = QPushButton("üìÑ Limpiar Resultados")
        clear_results_btn.setObjectName("utilityButton")
        clear_results_btn.clicked.connect(self.clear_results)

        help_button = QPushButton("‚ùì Ayuda")
        help_button.setObjectName("utilityButton")
        help_button.clicked.connect(self.show_help)

        layout.addWidget(clear_cache_btn)
        layout.addWidget(clear_results_btn)
        layout.addWidget(help_button)
        layout.addStretch()

        return utility_frame

    def create_status_bar(self):
        """Crear barra de estado"""
        status_layout = QHBoxLayout()

        # Etiqueta de estado
        self.status_label = QLabel("‚úÖ Sistema complementario listo")
        self.status_label.setObjectName("statusLabel")

        # Informaci√≥n del sistema
        cpu_count = multiprocessing.cpu_count()
        system_info = QLabel(f"üñ•Ô∏è CPUs: {cpu_count} | üìä An√°lisis Complementarios")
        system_info.setObjectName("systemInfo")

        # Barra de progreso
        self.progress_bar = QProgressBar()
        self.progress_bar.setObjectName("progressBar")
        self.progress_bar.setVisible(False)
        self.progress_bar.setMaximumWidth(200)

        status_layout.addWidget(self.status_label)
        status_layout.addStretch()
        status_layout.addWidget(system_info)
        status_layout.addWidget(self.progress_bar)

        return status_layout

    def apply_styles(self):
        """Aplicar estilos CSS"""
        styles = """
        QWidget {
            font-family: 'Segoe UI', Arial, sans-serif;
        }

        #windowTitle {
            font-size: 24px;
            font-weight: bold;
            color: #2c3e50;
        }

        #windowDesc {
            font-size: 14px;
            color: #6c757d;
        }

        #closeButton {
            background: #dc3545;
            color: white;
            border: none;
            border-radius: 15px;
            font-weight: bold;
        }

        #closeButton:hover {
            background: #c82333;
        }

        #controlGroup {
            font-size: 16px;
            font-weight: bold;
            color: #495057;
            border: 2px solid #dee2e6;
            border-radius: 10px;
            margin: 5px;
        }

        #introFrame {
            background: linear-gradient(135deg, #fff3e0 0%, #f8f9fa 100%);
            border: 1px solid #ffb74d;
            border-radius: 8px;
        }

        #introTitle {
            font-size: 16px;
            font-weight: bold;
            color: #ef6c00;
        }

        #introText {
            font-size: 13px;
            color: #37474f;
            line-height: 1.5;
        }

        #analysisFrame {
            background: #ffffff;
            border: 1px solid #e9ecef;
            border-radius: 8px;
        }

        #analysisWidget {
            background: linear-gradient(135deg, #ffffff 0%, #f8f9fa 100%);
            border: 2px solid #e9ecef;
            border-radius: 12px;
            margin: 5px 0;
        }

        #analysisWidget:hover {
            border-color: #007bff;
            background: linear-gradient(135deg, #f0f8ff 0%, #e6f3ff 100%);
        }

        #analysisIcon {
            font-size: 20px;
            margin-right: 8px;
        }

        #analysisName {
            font-size: 15px;
            font-weight: bold;
            color: #2c3e50;
        }

        #analysisSubtitle {
            font-size: 12px;
            color: #007bff;
            font-weight: 600;
            font-style: italic;
        }

        #analysisDesc {
            font-size: 12px;
            color: #6c757d;
            margin: 5px 0;
        }

        #analysisFeatures {
            font-size: 10px;
            color: #868e96;
            line-height: 1.4;
        }

        #statusIndicator {
            font-size: 20px;
            border: 2px solid #dee2e6;
            border-radius: 17px;
            background: #f8f9fa;
        }

        #timeLabel {
            font-size: 10px;
            color: #6c757d;
            font-weight: 500;
        }

        #executeButton {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
            color: white;
            border: none;
            border-radius: 6px;
            font-weight: bold;
            font-size: 12px;
        }

        #executeButton:hover {
            background: linear-gradient(135deg, #0056b3 0%, #004085 100%);
        }

        #executeButton:disabled {
            background: #6c757d;
        }

        #infoButton {
            background: #28a745;
            color: white;
            border: none;
            border-radius: 5px;
            font-size: 10px;
            font-weight: bold;
            padding: 5px 8px;
        }

        #infoButton:hover {
            background: #218838;
        }

        #utilityFrame {
            background: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 6px;
        }

        #utilityButton {
            background: #6c757d;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 8px 12px;
            font-size: 11px;
            font-weight: bold;
        }

        #utilityButton:hover {
            background: #5a6268;
        }

        #statusLabel {
            font-size: 13px;
            color: #007bff;
            font-weight: 500;
        }

        #systemInfo {
            font-size: 11px;
            color: #6c757d;
        }

        #progressBar {
            border: 1px solid #dee2e6;
            border-radius: 4px;
            text-align: center;
        }

        #progressBar::chunk {
            background: linear-gradient(90deg, #007bff 0%, #28a745 100%);
            border-radius: 3px;
        }
        """

        self.setStyleSheet(styles)

    def run_analysis(self, analysis_key):
        """Ejecutar an√°lisis seleccionado"""
        if self.worker and self.worker.isRunning():
            QMessageBox.information(
                self,
                "Procesamiento en Curso",
                "Ya hay un an√°lisis ejecut√°ndose. Por favor espera."
            )
            return

        # Actualizar UI
        self.update_ui_for_processing(analysis_key, True)

        # Crear y ejecutar worker
        self.worker = ComplementariosWorker(analysis_key)
        self.worker.finished.connect(self.on_analysis_finished)
        self.worker.progress.connect(self.update_progress)
        self.worker.status_update.connect(self.update_status)
        self.worker.start()

    def update_ui_for_processing(self, analysis_key, is_processing):
        """Actualizar UI durante procesamiento"""
        # Deshabilitar todos los botones
        for key, components in self.analysis_buttons.items():
            components['button'].setEnabled(not is_processing)
            components['info_button'].setEnabled(not is_processing)

            if key == analysis_key and is_processing:
                components['status'].setText("‚ö°")
                components['status'].setStyleSheet("color: #ffc107; font-weight: bold; font-size: 24px;")
            elif not is_processing:
                components['status'].setText("‚ö™")
                components['status'].setStyleSheet("")

        # Mostrar/ocultar barra de progreso
        self.progress_bar.setVisible(is_processing)
        if is_processing:
            self.progress_bar.setValue(0)

    def update_progress(self, value):
        """Actualizar progreso"""
        self.progress_bar.setValue(value)

    def update_status(self, message):
        """Actualizar mensaje de estado"""
        self.status_label.setText(message)

    def on_analysis_finished(self, results, analysis_key):
        """Manejar finalizaci√≥n del an√°lisis"""
        # Restaurar UI
        self.update_ui_for_processing(analysis_key, False)

        if "error" in results:
            self.status_label.setText(f"‚ùå Error: {results['error']}")
            self.analysis_buttons[analysis_key]['status'].setText("‚ùå")
            self.analysis_buttons[analysis_key]['status'].setStyleSheet("color: #dc3545; font-size: 24px;")

            QMessageBox.critical(
                self,
                "Error en An√°lisis",
                f"Error durante la ejecuci√≥n:\n{results['error']}"
            )
            return

        # Marcar como completado
        self.analysis_buttons[analysis_key]['status'].setText("‚úÖ")
        self.analysis_buttons[analysis_key]['status'].setStyleSheet(
            "color: #28a745; font-weight: bold; font-size: 24px;")

        # Mostrar resultados
        self.resultados_widget.mostrar_resultados(results, analysis_key)

        # Mensaje de √©xito
        success_messages = {
            "calidad_agua": "‚úÖ An√°lisis de calidad completado - Par√°metros evaluados",
            "optimizar_sistema": "‚úÖ Optimizaci√≥n completada - Mejores par√°metros encontrados",
            "comparar_metodos": "‚úÖ Comparaci√≥n completada - Algoritmos evaluados"
        }

        self.status_label.setText(success_messages.get(analysis_key, "‚úÖ An√°lisis completado"))

    def show_analysis_info(self, analysis_config):
        """Mostrar informaci√≥n detallada del an√°lisis"""
        info_texts = {
            "calidad_agua": (
                "<b>üß™ An√°lisis de Calidad del Agua</b><br><br>"
                "<b>Objetivo:</b> Evaluar la calidad del agua mediante an√°lisis integral de par√°metros.<br><br>"
                "<b>Par√°metros evaluados:</b><br>"
                "‚Ä¢ <b>pH:</b> Acidez/alcalinidad (rango √≥ptimo: 6.5-8.5)<br>"
                "‚Ä¢ <b>Ox√≠geno Disuelto:</b> Disponibilidad para vida acu√°tica (>6 mg/L)<br>"
                "‚Ä¢ <b>Turbidez:</b> Claridad del agua (<4 NTU)<br>"
                "‚Ä¢ <b>Conductividad:</b> Contenido de sales (200-800 ŒºS/cm)<br><br>"
                "<b>Resultados:</b><br>"
                "‚Ä¢ Score de calidad (0-100)<br>"
                "‚Ä¢ Clasificaci√≥n autom√°tica<br>"
                "‚Ä¢ Estad√≠sticas descriptivas<br>"
                "‚Ä¢ Recomendaciones de mejora"
            ),
            "optimizar_sistema": (
                "<b>‚öôÔ∏è Optimizaci√≥n de Hiperpar√°metros</b><br><br>"
                "<b>Objetivo:</b> Encontrar la configuraci√≥n √≥ptima para algoritmos ML.<br><br>"
                "<b>Proceso:</b><br>"
                "‚Ä¢ <b>Grid Search:</b> B√∫squeda sistem√°tica de par√°metros<br>"
                "‚Ä¢ <b>Validaci√≥n Cruzada:</b> Evaluaci√≥n robusta<br>"
                "‚Ä¢ <b>M√©tricas m√∫ltiples:</b> Precisi√≥n, tiempo, complejidad<br><br>"
                "<b>Par√°metros optimizados:</b><br>"
                "‚Ä¢ N√∫mero de estimadores (√°rboles)<br>"
                "‚Ä¢ Profundidad m√°xima<br>"
                "‚Ä¢ Criterios de divisi√≥n<br><br>"
                "<b>Resultado:</b> Configuraci√≥n recomendada con mejor balance precisi√≥n/eficiencia"
            ),
            "comparar_metodos": (
                "<b>üìä Comparaci√≥n de Algoritmos ML</b><br><br>"
                "<b>Objetivo:</b> Evaluar y comparar diferentes algoritmos de machine learning.<br><br>"
                "<b>Algoritmos comparados:</b><br>"
                "‚Ä¢ <b>Random Forest:</b> Ensemble de √°rboles de decisi√≥n<br>"
                "‚Ä¢ <b>SVM:</b> M√°quinas de vectores de soporte<br>"
                "‚Ä¢ <b>√Årbol de Decisi√≥n:</b> Modelo interpretable<br><br>"
                "<b>M√©tricas evaluadas:</b><br>"
                "‚Ä¢ Precisi√≥n de clasificaci√≥n<br>"
                "‚Ä¢ Tiempo de entrenamiento<br>"
                "‚Ä¢ Interpretabilidad<br>"
                "‚Ä¢ Robustez<br><br>"
                "<b>Resultado:</b> Recomendaci√≥n del algoritmo m√°s adecuado para el caso de uso"
            )
        }

        info_text = info_texts.get(analysis_config["key"], "Informaci√≥n no disponible")

        QMessageBox.information(
            self,
            f"Informaci√≥n - {analysis_config['name']}",
            info_text
        )

    def show_help(self):
        """Mostrar ayuda general"""
        help_text = (
            "<b>üìä An√°lisis Complementarios - Gu√≠a de Uso</b><br><br>"
            "<b>Prop√≥sito:</b><br>"
            "Herramientas adicionales para evaluar, optimizar y comparar "
            "el rendimiento de sistemas de machine learning.<br><br>"
            "<b>Flujo recomendado:</b><br>"
            "1. <b>An√°lisis de Calidad:</b> Eval√∫a tus datos iniciales<br>"
            "2. <b>Comparaci√≥n de M√©todos:</b> Identifica el mejor algoritmo<br>"
            "3. <b>Optimizaci√≥n:</b> Afina los par√°metros del mejor m√©todo<br><br>"
            "<b>Interpretaci√≥n:</b><br>"
            "‚Ä¢ <b>Scores >80:</b> Excelente calidad<br>"
            "‚Ä¢ <b>Precisi√≥n >90%:</b> Modelo muy confiable<br>"
            "‚Ä¢ <b>Optimizaci√≥n:</b> Mejora t√≠pica de 3-5% en precisi√≥n<br><br>"
            "<b>Consejos:</b><br>"
            "‚Ä¢ Ejecuta an√°lisis en orden sugerido<br>"
            "‚Ä¢ Compara resultados entre m√©todos<br>"
            "‚Ä¢ Usa optimizaci√≥n solo despu√©s de seleccionar algoritmo"
        )

        QMessageBox.information(self, "‚ùì Ayuda - An√°lisis Complementarios", help_text)

    def clear_cache(self):
        """Limpiar cache del sistema"""
        self.cache.clear()
        self.status_label.setText("üóëÔ∏è Cache limpiado")

        # Resetear indicadores de estado
        for components in self.analysis_buttons.values():
            components['status'].setText("‚ö™")
            components['status'].setStyleSheet("")

    def clear_results(self):
        """Limpiar resultados visuales"""
        self.resultados_widget.limpiar_resultados()
        self.status_label.setText("üìÑ Resultados limpiados")

    def closeEvent(self, event):
        """Manejar cierre de ventana"""
        if self.worker and self.worker.isRunning():
            reply = QMessageBox.question(
                self,
                "Cerrar Ventana",
                "Hay un an√°lisis ejecut√°ndose. ¬øDeseas interrumpirlo?",
                QMessageBox.Yes | QMessageBox.No
            )

            if reply == QMessageBox.Yes:
                self.worker.terminate()
                self.worker.wait(2000)
            else:
                event.ignore()
                return

        event.accept()


if __name__ == "__main__":
    from PyQt5.QtWidgets import QApplication

    app = QApplication(sys.argv)
    window = AnalisisComplementarios()
    window.show()
    sys.exit(app.exec_())