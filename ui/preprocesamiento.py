from PyQt5.QtCore import pyqtSignal, Qt
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QPushButton,
                             QLabel, QComboBox, QTableWidget, QTableWidgetItem,
                             QGroupBox, QTabWidget, QScrollArea, QGridLayout,
                             QFrame, QTextEdit, QSplitter)
from PyQt5.QtGui import QPixmap, QFont
from ml.resumen_estadistico import resumen_univariable
from ml.visualizaciones import generar_boxplot, generar_histograma, generar_densidad, obtener_ruta_imagen


class Preprocesamiento(QWidget):
    cambiar_a_bivariado = pyqtSignal()

    def __init__(self):
        super().__init__()
        self.setWindowTitle("An√°lisis de Datos - Preprocesamiento")
        self.df = None
        self.setMinimumSize(1200, 800)
        self.setup_ui()

    def setup_ui(self):
        self.setStyleSheet("""
            QWidget {
                background-color: #f8fafc;
                font-family: 'Segoe UI', Arial, sans-serif;
                font-size: 14px;
            }

            QTabWidget::pane {
                border: 1px solid #e2e8f0;
                background-color: white;
                border-radius: 8px;
            }

            QTabWidget::tab-bar {
                alignment: left;
            }

            QTabBar::tab {
                background: #f1f5f9;
                border: 1px solid #e2e8f0;
                padding: 12px 24px;
                margin-right: 2px;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                font-weight: 600;
                color: #4a5568;
            }

            QTabBar::tab:selected {
                background: white;
                border-bottom-color: white;
                color: #2d3748;
            }

            QTabBar::tab:hover {
                background: #e2e8f0;
            }

            .header-title {
                font-size: 24px;
                font-weight: bold;
                color: #1a365d;
                margin: 15px 0;
                background: none;
            }

            .control-button {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #4299e1, stop:1 #3182ce);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                font-weight: 600;
                font-size: 14px;
                min-height: 20px;
            }

            .control-button:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #3182ce, stop:1 #2c5282);
            }

            .control-button:pressed {
                background: #2c5282;
            }

            .secondary-button {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #68d391, stop:1 #48bb78);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                font-weight: 600;
                font-size: 14px;
            }

            .secondary-button:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #48bb78, stop:1 #38a169);
            }

            .danger-button {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #fc8181, stop:1 #f56565);
                color: white;
                border: none;
                border-radius: 8px;
                padding: 12px 20px;
                font-weight: 600;
            }

            .danger-button:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f56565, stop:1 #e53e3e);
            }

            QComboBox {
                background-color: white;
                border: 2px solid #e2e8f0;
                border-radius: 6px;
                padding: 8px 12px;
                font-size: 14px;
                min-height: 20px;
            }

            QComboBox:focus {
                border-color: #4299e1;
            }

            QComboBox::drop-down {
                border: none;
                width: 30px;
            }

            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #4a5568;
            }

            .stats-group {
                background-color: white;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                padding: 20px;
                margin: 10px 0;
            }

            .stats-title {
                font-size: 18px;
                font-weight: bold;
                color: #2d3748;
                margin-bottom: 15px;
                background: none;
            }

            QTableWidget {
                background-color: white;
                border: 1px solid #e2e8f0;
                border-radius: 6px;
                gridline-color: #f1f5f9;
                font-size: 13px;
            }

            QTableWidget::item {
                padding: 8px;
                border-bottom: 1px solid #f1f5f9;
            }

            QHeaderView::section {
                background: #f8fafc;
                border: none;
                border-bottom: 2px solid #e2e8f0;
                padding: 12px 8px;
                font-weight: bold;
                color: #4a5568;
            }

            .graph-container {
                background-color: white;
                border: 1px solid #e2e8f0;
                border-radius: 8px;
                padding: 15px;
                margin: 10px 5px;
            }

            .graph-title {
                font-size: 16px;
                font-weight: bold;
                color: #2d3748;
                text-align: center;
                margin-bottom: 10px;
                background: none;
            }

            .recommendations-box {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1,
                    stop:0 #f0fff4, stop:1 #f7fafc);
                border: 1px solid #68d391;
                border-radius: 8px;
                padding: 20px;
                margin: 15px 0;
            }

            .recommendations-title {
                font-size: 16px;
                font-weight: bold;
                color: #22543d;
                margin-bottom: 10px;
                background: none;
            }

            .recommendations-text {
                color: #2f855a;
                line-height: 1.6;
                background: none;
            }
        """)

        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)

        # Header
        self.create_header(main_layout)

        # Controles principales
        self.create_controls(main_layout)

        # Pesta√±as principales
        self.create_tabs(main_layout)

        # Botones de navegaci√≥n
        self.create_navigation(main_layout)

        self.setLayout(main_layout)

    def create_header(self, layout):
        header_layout = QHBoxLayout()

        title = QLabel("üîç An√°lisis Exploratorio de Datos")
        title.setProperty("class", "header-title")
        header_layout.addWidget(title)

        header_layout.addStretch()

        # Selector de variable
        var_layout = QHBoxLayout()
        var_label = QLabel("Variable a analizar:")
        var_label.setStyleSheet("font-weight: bold; color: #4a5568; background: none; margin-right: 10px;")
        self.combo_columnas = QComboBox()
        self.combo_columnas.setMinimumWidth(200)
        self.combo_columnas.currentTextChanged.connect(self.on_variable_changed)

        var_layout.addWidget(var_label)
        var_layout.addWidget(self.combo_columnas)
        header_layout.addLayout(var_layout)

        layout.addLayout(header_layout)

    def create_controls(self, layout):
        controls_frame = QFrame()
        controls_frame.setStyleSheet(
            "background-color: white; border: 1px solid #e2e8f0; border-radius: 8px; padding: 15px;")

        controls_layout = QHBoxLayout()
        controls_layout.setSpacing(15)

        # Botones de an√°lisis
        self.btn_generar_todo = QPushButton("üöÄ Generar An√°lisis Completo")
        self.btn_generar_todo.setProperty("class", "control-button")
        self.btn_generar_todo.clicked.connect(self.generar_analisis_completo)

        self.btn_limpiar = QPushButton("üóëÔ∏è Limpiar Resultados")
        self.btn_limpiar.setProperty("class", "danger-button")
        self.btn_limpiar.clicked.connect(self.limpiar_resultados)

        controls_layout.addWidget(self.btn_generar_todo)
        controls_layout.addWidget(self.btn_limpiar)
        controls_layout.addStretch()

        controls_frame.setLayout(controls_layout)
        layout.addWidget(controls_frame)

    def create_tabs(self, layout):
        self.tabs = QTabWidget()

        # Pesta√±a 1: Visualizaciones
        self.create_visualizations_tab()

        # Pesta√±a 2: Resumen Estad√≠stico
        self.create_statistics_tab()

        # Pesta√±a 3: Recomendaciones
        self.create_recommendations_tab()

        layout.addWidget(self.tabs)

    def create_visualizations_tab(self):
        viz_widget = QWidget()
        viz_layout = QVBoxLayout()

        # T√≠tulo de la secci√≥n
        section_title = QLabel("üìä Visualizaciones Estad√≠sticas")
        section_title.setProperty("class", "stats-title")
        viz_layout.addWidget(section_title)

        # Container para los gr√°ficos
        graphs_container = QHBoxLayout()
        graphs_container.setSpacing(15)

        # Boxplot
        self.boxplot_container = self.create_graph_container("üì¶ Diagrama de Caja", "boxplot")
        graphs_container.addWidget(self.boxplot_container)

        # Histograma
        self.histogram_container = self.create_graph_container("üìà Histograma", "histogram")
        graphs_container.addWidget(self.histogram_container)

        # Densidad
        self.density_container = self.create_graph_container("üåä Densidad", "density")
        graphs_container.addWidget(self.density_container)

        viz_layout.addLayout(graphs_container)
        viz_widget.setLayout(viz_layout)
        self.tabs.addTab(viz_widget, "üìä Visualizaciones")

    def create_graph_container(self, title, graph_type):
        container = QFrame()
        container.setProperty("class", "graph-container")
        container.setMinimumHeight(350)

        layout = QVBoxLayout()

        # T√≠tulo del gr√°fico
        graph_title = QLabel(title)
        graph_title.setProperty("class", "graph-title")
        layout.addWidget(graph_title)

        # Label para la imagen
        graph_label = QLabel("Haga clic en 'Generar An√°lisis Completo' para ver el gr√°fico")
        graph_label.setAlignment(Qt.AlignCenter)
        graph_label.setMinimumHeight(250)
        graph_label.setStyleSheet("""
            background-color: #f8fafc;
            border: 2px dashed #cbd5e0;
            border-radius: 6px;
            color: #a0aec0;
            font-style: italic;
        """)

        setattr(self, f"label_{graph_type}", graph_label)
        layout.addWidget(graph_label)

        container.setLayout(layout)
        return container

    def create_statistics_tab(self):
        stats_widget = QWidget()
        stats_layout = QVBoxLayout()

        # T√≠tulo
        title = QLabel("üìã Resumen Estad√≠stico Detallado")
        title.setProperty("class", "stats-title")
        stats_layout.addWidget(title)

        # Tabla de estad√≠sticas
        self.tabla_datos = QTableWidget()
        self.tabla_datos.setMinimumHeight(400)
        stats_layout.addWidget(self.tabla_datos)

        stats_widget.setLayout(stats_layout)
        self.tabs.addTab(stats_widget, "üìã Estad√≠sticas")

    def create_recommendations_tab(self):
        rec_widget = QWidget()
        rec_layout = QVBoxLayout()

        # T√≠tulo
        title = QLabel("üí° Recomendaciones y Observaciones")
        title.setProperty("class", "stats-title")
        rec_layout.addWidget(title)

        # √Årea de recomendaciones
        self.recommendations_area = QTextEdit()
        self.recommendations_area.setProperty("class", "recommendations-box")
        self.recommendations_area.setReadOnly(True)
        self.recommendations_area.setMinimumHeight(300)
        self.recommendations_area.setText("Genere el an√°lisis completo para ver las recomendaciones autom√°ticas...")

        rec_layout.addWidget(self.recommendations_area)

        rec_widget.setLayout(rec_layout)
        self.tabs.addTab(rec_widget, "üí° Recomendaciones")

    def create_navigation(self, layout):
        nav_layout = QHBoxLayout()

        self.btn_regresar = QPushButton("‚¨ÖÔ∏è Volver al Men√∫ Principal")
        self.btn_regresar.setProperty("class", "danger-button")

        self.btn_bivariable = QPushButton("‚û°Ô∏è Ir a An√°lisis Bivariado")
        self.btn_bivariable.setProperty("class", "secondary-button")
        self.btn_bivariable.clicked.connect(self.cambiar_a_bivariado.emit)

        nav_layout.addWidget(self.btn_regresar)
        nav_layout.addStretch()
        nav_layout.addWidget(self.btn_bivariable)

        layout.addLayout(nav_layout)

    def cargar_dataframe(self, df):
        self.df = df
        columnas = df.select_dtypes(include='number').columns.tolist()
        self.combo_columnas.clear()
        self.combo_columnas.addItems(columnas)

    def on_variable_changed(self):
        """Se ejecuta cuando cambia la variable seleccionada"""
        if self.df is not None:
            self.limpiar_graficos()

    def generar_analisis_completo(self):
        """Genera todas las visualizaciones y estad√≠sticas de una vez"""
        if self.df is None:
            return

        col = self.combo_columnas.currentText()
        if not col:
            return

        # Generar estad√≠sticas
        self.mostrar_resumen()

        # Generar gr√°ficos
        self.mostrar_boxplot()
        self.mostrar_histograma()
        self.mostrar_densidad()

        # Generar recomendaciones
        self.generar_recomendaciones()

    def limpiar_resultados(self):
        """Limpia todos los resultados"""
        self.limpiar_graficos()
        self.tabla_datos.clear()
        self.recommendations_area.setText("Genere el an√°lisis completo para ver las recomendaciones autom√°ticas...")

    def limpiar_graficos(self):
        """Limpia solo los gr√°ficos"""
        for graph_type in ['boxplot', 'histogram', 'density']:
            label = getattr(self, f"label_{graph_type}")
            label.clear()
            label.setText("Haga clic en 'Generar An√°lisis Completo' para ver el gr√°fico")

    def mostrar_resumen(self):
        if self.df is not None:
            resumen = resumen_univariable(self.df)
            self.mostrar_en_tabla(resumen)

    def mostrar_en_tabla(self, resumen):
        self.tabla_datos.setRowCount(len(resumen))
        self.tabla_datos.setColumnCount(len(resumen.columns))
        self.tabla_datos.setHorizontalHeaderLabels(resumen.columns.tolist())
        self.tabla_datos.setVerticalHeaderLabels(resumen.index.tolist())

        for i, row in enumerate(resumen.values):
            for j, val in enumerate(row):
                item = QTableWidgetItem(str(round(val, 4) if isinstance(val, float) else val))
                item.setTextAlignment(Qt.AlignCenter)
                self.tabla_datos.setItem(i, j, item)

        # Ajustar columnas
        self.tabla_datos.resizeColumnsToContents()

    def mostrar_boxplot(self):
        col = self.combo_columnas.currentText()
        if col:
            generar_boxplot(self.df, col)
            pixmap = QPixmap(obtener_ruta_imagen())
            if not pixmap.isNull():
                self.label_boxplot.setPixmap(pixmap.scaled(
                    self.label_boxplot.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

    def mostrar_histograma(self):
        col = self.combo_columnas.currentText()
        if col:
            generar_histograma(self.df, col)
            pixmap = QPixmap(obtener_ruta_imagen())
            if not pixmap.isNull():
                self.label_histogram.setPixmap(pixmap.scaled(
                    self.label_histogram.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

    def mostrar_densidad(self):
        col = self.combo_columnas.currentText()
        if col:
            generar_densidad(self.df, col)
            pixmap = QPixmap(obtener_ruta_imagen())
            if not pixmap.isNull():
                self.label_density.setPixmap(pixmap.scaled(
                    self.label_density.size(), Qt.KeepAspectRatio, Qt.SmoothTransformation))

    def generar_recomendaciones(self):
        """Genera recomendaciones autom√°ticas basadas en los datos"""
        if self.df is None:
            return

        col = self.combo_columnas.currentText()
        if not col:
            return

        try:
            serie = self.df[col].dropna()

            # Estad√≠sticas b√°sicas
            media = serie.mean()
            mediana = serie.median()
            std = serie.std()
            q1 = serie.quantile(0.25)
            q3 = serie.quantile(0.75)
            iqr = q3 - q1

            # Detecci√≥n de outliers
            outliers_lower = serie < (q1 - 1.5 * iqr)
            outliers_upper = serie > (q3 + 1.5 * iqr)
            total_outliers = outliers_lower.sum() + outliers_upper.sum()

            # Generar recomendaciones
            recomendaciones = []

            recomendaciones.append(f"üìä AN√ÅLISIS DE LA VARIABLE: {col.upper()}")
            recomendaciones.append("=" * 50)
            recomendaciones.append("")

            # An√°lisis de distribuci√≥n
            if abs(media - mediana) / std < 0.1:
                recomendaciones.append("‚úÖ DISTRIBUCI√ìN: Los datos muestran una distribuci√≥n aproximadamente normal.")
                recomendaciones.append("   ‚Üí Recomendaci√≥n: Se pueden usar m√©todos estad√≠sticos param√©tricos.")
            else:
                recomendaciones.append("‚ö†Ô∏è  DISTRIBUCI√ìN: Los datos muestran asimetr√≠a significativa.")
                recomendaciones.append("   ‚Üí Recomendaci√≥n: Considerar transformaciones o m√©todos no param√©tricos.")

            recomendaciones.append("")

            # An√°lisis de outliers
            if total_outliers == 0:
                recomendaciones.append("‚úÖ VALORES AT√çPICOS: No se detectaron outliers significativos.")
                recomendaciones.append("   ‚Üí Los datos son consistentes y confiables.")
            elif total_outliers <= len(serie) * 0.05:  # Menos del 5%
                recomendaciones.append(
                    f"‚ö†Ô∏è  VALORES AT√çPICOS: Se detectaron {total_outliers} outliers ({total_outliers / len(serie) * 100:.1f}% de los datos).")
                recomendaciones.append("   ‚Üí Cantidad normal, revisar si son errores de medici√≥n o valores reales.")
            else:
                recomendaciones.append(
                    f"üö® VALORES AT√çPICOS: Se detectaron {total_outliers} outliers ({total_outliers / len(serie) * 100:.1f}% de los datos).")
                recomendaciones.append("   ‚Üí Cantidad elevada, requiere investigaci√≥n detallada.")

            recomendaciones.append("")

            # An√°lisis de variabilidad
            cv = (std / media) * 100 if media != 0 else 0
            if cv < 15:
                recomendaciones.append("‚úÖ VARIABILIDAD: Baja variabilidad en los datos (CV < 15%).")
                recomendaciones.append("   ‚Üí Los datos son consistentes y precisos.")
            elif cv < 30:
                recomendaciones.append("‚ö†Ô∏è  VARIABILIDAD: Variabilidad moderada en los datos (15% ‚â§ CV < 30%).")
                recomendaciones.append("   ‚Üí Variabilidad normal para datos ambientales.")
            else:
                recomendaciones.append("üö® VARIABILIDAD: Alta variabilidad en los datos (CV ‚â• 30%).")
                recomendaciones.append("   ‚Üí Revisar posibles factores que afecten las mediciones.")

            recomendaciones.append("")

            # Recomendaciones espec√≠ficas para calidad del agua
            recomendaciones.append("üåä RECOMENDACIONES ESPEC√çFICAS PARA CALIDAD DEL AGUA:")
            recomendaciones.append("")

            if 'ph' in col.lower() or 'pH' in col:
                if 6.5 <= media <= 8.5:
                    recomendaciones.append("‚úÖ pH: Dentro del rango aceptable para agua potable (6.5-8.5).")
                else:
                    recomendaciones.append("‚ö†Ô∏è  pH: Fuera del rango recomendado para agua potable.")
                    recomendaciones.append("   ‚Üí Implementar medidas de correcci√≥n de pH.")

            elif 'oxigeno' in col.lower() or 'od' in col.lower():
                if media >= 5:
                    recomendaciones.append("‚úÖ Ox√≠geno Disuelto: Niveles adecuados para vida acu√°tica (‚â•5 mg/L).")
                else:
                    recomendaciones.append("üö® Ox√≠geno Disuelto: Niveles cr√≠ticos para vida acu√°tica (<5 mg/L).")
                    recomendaciones.append("   ‚Üí Investigar fuentes de contaminaci√≥n org√°nica.")

            elif 'turbidez' in col.lower() or 'turbiedad' in col.lower():
                if media <= 4:
                    recomendaciones.append("‚úÖ Turbidez: Dentro de los l√≠mites aceptables (‚â§4 NTU).")
                else:
                    recomendaciones.append("‚ö†Ô∏è  Turbidez: Elevada, puede indicar contaminaci√≥n.")
                    recomendaciones.append("   ‚Üí Evaluar sistemas de filtraci√≥n y sedimentaci√≥n.")

            elif 'coliform' in col.lower():
                if media == 0:
                    recomendaciones.append("‚úÖ Coliformes: Ausentes, excelente calidad microbiol√≥gica.")
                else:
                    recomendaciones.append("üö® Coliformes: Presentes, riesgo sanitario.")
                    recomendaciones.append("   ‚Üí Implementar desinfecci√≥n inmediata.")

            recomendaciones.append("")
            recomendaciones.append("üìã PR√ìXIMOS PASOS RECOMENDADOS:")
            recomendaciones.append("‚Ä¢ Realizar an√°lisis bivariado para identificar correlaciones")
            recomendaciones.append("‚Ä¢ Analizar tendencias temporales si hay datos de fecha")
            recomendaciones.append("‚Ä¢ Comparar con normativas locales de calidad del agua")
            recomendaciones.append("‚Ä¢ Implementar monitoreo continuo en puntos cr√≠ticos")

            self.recommendations_area.setText("\n".join(recomendaciones))

        except Exception as e:
            self.recommendations_area.setText(f"Error al generar recomendaciones: {str(e)}")